<?xml version="1.0" encoding="UTF-8"?>
<chapter id="c.debug">
	<title>调试工具</title>
	<section>
		<title>file 命令</title>
		<para>file 命令将帮助你确定你所处理的文件类型。</para>
		<screen>
		<![CDATA[
[root@localhost ~]# file /bin/ls
/bin/ls: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=bed150f5bac8514e69b3b98eb6fd3e75d6b277c8, stripped, too many notes (256)

neo@MacBook-Pro-Neo ~ % file /bin/ls
/bin/ls: Mach-O 64-bit executable x86_64		
		]]>
		</screen>
	</section>

	<section id="ftop">
		<title>ftop - Tool to show progress of open files and file systems</title>
		<para>ftop 是一个显示进程打开文件的工具</para>
		<screen>
		<![CDATA[
Tue Jan 20 16:25:50 2015                                                                                 ftop 1.0
Processes:  47 total, 0 unreadable                                                Press h for help, o for options
Open Files: 57 regular, 0 dir, 149 chr, 0 blk, 12 pipe, 59 sock, 15 misc

_  PID    #FD  USER      COMMAND                                                                                  
-- 413    10   root      /sbin/udevd -d
|  +- 3    -rw  --	935/935      /dev/.udev/queue.bin
-- 982    7    root      auditd
|  +- 5    --W  --     3.1M/3.1M     /var/log/audit/audit.log
-- 1002   5    root      /sbin/rsyslogd -i /var/run/syslogd.pid -c 5
|  +- out  --W  --     8059/8059     /var/log/messages
|  +- err  --W  --    16443/16443    /var/log/cron
|  +- 3    -r-  --        0/0        /proc/kmsg
|  +- 4    --W  --    14976/14976    /var/log/secure
-- 1106   17   www       nginx: worker process                   
|  +- err  --W  --   538920/538920   /var/log/nginx/error.log (fd 11 for PID 1106)
		]]>
		</screen>
	</section>
	<section id="ldd">
		<title> ldd - print shared library dependencies </title>
		<para>如何找到可执行程序所依赖的库？这就是 ldd 命令的作用了。对动态链接的二进制文件运行该命令会显示出所有依赖库和它们的路径。</para>
		<screen>
		<![CDATA[
$ ldd /bin/ls
        linux-gate.so.1 =>  (0xffffe000)
        librt.so.1 => /lib/tls/i686/cmov/librt.so.1 (0xb7f13000)
        libacl.so.1 => /lib/libacl.so.1 (0xb7f0d000)
        libselinux.so.1 => /lib/libselinux.so.1 (0xb7ef9000)
        libc.so.6 => /lib/tls/i686/cmov/libc.so.6 (0xb7dc4000)
        libpthread.so.0 => /lib/tls/i686/cmov/libpthread.so.0 (0xb7db1000)
        /lib/ld-linux.so.2 (0xb7f22000)
        libattr.so.1 => /lib/libattr.so.1 (0xb7dad000)
        libdl.so.2 => /lib/tls/i686/cmov/libdl.so.2 (0xb7da9000)
        libsepol.so.1 => /lib/libsepol.so.1 (0xb7d6c000)
		]]>
		</screen>
		<para>举例</para>
		<screen>
			# ./boinc
			./boinc: error while loading shared libraries: libssl.so.1.0.0: cannot open shared object file: No such file or directory

			# ldd ./boinc | grep libssl
			./boinc: /lib64/libcurl.so.4: no version information available (required by ./boinc)
			libssl.so.1.0.0 => not found
			libssl3.so => /lib64/libssl3.so (0x00007f1f46998000)
			libssl.so.10 => /lib64/libssl.so.10 (0x00007f1f44ba1000)
		</screen>
	</section>
	<section id="strace">
		<title>strace - trace system calls and signals</title>
		<para>跟踪系统调用和信号。</para>
		<screen>
		<![CDATA[
-tt  在每行输出的前面,显示毫秒级别的时间
-T   显示每次系统调用所花费的时间
-v   对于某些相关调用,把完整的环境变量,文件stat结构等打出来.
-f   跟踪目标进程,以及目标进程创建的所有子进程.
-e  控制要跟踪的事件和跟踪行为,比如指定要跟踪的系统调用名称.
     trace=file     跟踪和文件访问相关的调用(参数中有文件名)
     trace=process  和进程管理相关的调用,比如fork/exec/exit_group
      trace=network  和网络通信相关的调用,比如socket/sendto/connect
      trace=signal    信号发送和处理相关,比如kill/sigaction
      trace=desc  和文件描述符相关,比如write/read/select/epoll等    
      trace=ipc 进程见通信相关,比如shmget等
      
-o  把strace的输出单独写到指定的文件
-s  当系统调用的某个参数是字符串时,最多输出指定长度的内容，默认是32个字节.
-p  指定要跟踪的进程pid,要同时跟踪多个pid,重复多次-p选项即可.		
		]]>
		</screen>
		<screen>
		<![CDATA[
strace -tt -T -v -f -e trace=file -o ~/strace.log.2 -s 1024 -p  25849		
		]]>
		</screen>
		<para>strace -v ps -e 2</para>
		<para>strace -v ls</para>
		<screen>
		<![CDATA[
neo@netkiller:~/workspace/Document$ strace -c ls
Docbook  makedoc  Tex
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
  -nan    0.000000           0        11           read
  -nan    0.000000           0         1           write
  -nan    0.000000           0        38        13 open
  -nan    0.000000           0        27           close
  -nan    0.000000           0        25           fstat
  -nan    0.000000           0        39           mmap
  -nan    0.000000           0        16           mprotect
  -nan    0.000000           0         4           munmap
  -nan    0.000000           0         3           brk
  -nan    0.000000           0         2           rt_sigaction
  -nan    0.000000           0         1           rt_sigprocmask
  -nan    0.000000           0         2           ioctl
  -nan    0.000000           0         9         9 access
  -nan    0.000000           0         1           execve
  -nan    0.000000           0         1           fcntl
  -nan    0.000000           0         2           getdents
  -nan    0.000000           0         1           getrlimit
  -nan    0.000000           0         1           statfs
  -nan    0.000000           0         1           arch_prctl
  -nan    0.000000           0         3         1 futex
  -nan    0.000000           0         1           set_tid_address
  -nan    0.000000           0         1           set_robust_list
------ ----------- ----------- --------- --------- ----------------
100.00    0.000000                   190        23 total
			]]>
		</screen>
		<screen>
			<![CDATA[
neo@netkiller:~/workspace/Document$ strace -f -e open ls >/dev/null
open("/etc/ld.so.cache", O_RDONLY)      = 3
open("/lib/librt.so.1", O_RDONLY)       = 3
open("/lib/libselinux.so.1", O_RDONLY)  = 3
open("/lib/libacl.so.1", O_RDONLY)      = 3
open("/lib/libc.so.6", O_RDONLY)        = 3
open("/lib/libpthread.so.0", O_RDONLY)  = 3
open("/lib/libdl.so.2", O_RDONLY)       = 3
open("/lib/libattr.so.1", O_RDONLY)     = 3
open("/proc/filesystems", O_RDONLY)     = 3
open("/usr/lib/locale/locale-archive", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/share/locale/locale.alias", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_IDENTIFICATION", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_IDENTIFICATION", O_RDONLY) = 3
open("/usr/lib/gconv/gconv-modules.cache", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_MEASUREMENT", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_MEASUREMENT", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_TELEPHONE", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_TELEPHONE", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_ADDRESS", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_ADDRESS", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_NAME", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_NAME", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_PAPER", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_PAPER", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_MESSAGES", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_MESSAGES", O_RDONLY) = 3
open("/usr/lib/locale/en_US.utf8/LC_MESSAGES/SYS_LC_MESSAGES", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_MONETARY", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_MONETARY", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_COLLATE", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_COLLATE", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_TIME", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_TIME", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_NUMERIC", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_NUMERIC", O_RDONLY) = 3
open("/usr/lib/locale/en_US.UTF-8/LC_CTYPE", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/lib/locale/en_US.utf8/LC_CTYPE", O_RDONLY) = 3
open(".", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3
		]]>
		</screen>
		<section>
			<title>-o file -- send trace output to FILE instead of stderr</title>
			<screen>
			<![CDATA[
$ strace -o strace.log php --version
$ grep php.ini strace.log
			]]>
			</screen>
		</section>
	</section>
	<section id="ltrace">
		<title>ltrace - A library call tracer</title>
		<para>它的作用：库调用跟踪器。一个库可以包含数百个函数。在这几百个函数中，哪些是我们的二进制程序正在使用的实际函数？</para>
		<para>ltrace 命令可以显示运行时从库中调用的所有函数。在下面的例子中，你可以看到被调用的函数名称，以及传递给该函数的参数。你也可以在输出的最右边看到这些函数返回的内容。</para>
		<para>ltrace ls</para>
		<screen>
		<![CDATA[
neo@netkiller:~/workspace/Document$ ltrace ls
__libc_start_main(0x407bb0, 1, 0x7fff827aea38, 0x413730, 0x413720 <unfinished ...>
strrchr("ls", '/')                                                                                            = NULL
setlocale(6, "")                                                                                              = "en_US.UTF-8"
bindtextdomain("coreutils", "/usr/share/locale")                                                              = "/usr/share/locale"
textdomain("coreutils")                                                                                       = "coreutils"
__cxa_atexit(0x40abb0, 0, 0, 0x736c6974756572, 1)                                                             = 0
isatty(1)                                                                                                     = 1
getenv("QUOTING_STYLE")                                                                                       = NULL
getenv("LS_BLOCK_SIZE")                                                                                       = NULL
getenv("BLOCK_SIZE")                                                                                          = NULL
getenv("BLOCKSIZE")                                                                                           = NULL
getenv("POSIXLY_CORRECT")                                                                                     = NULL
getenv("BLOCK_SIZE")                                                                                          = NULL
getenv("COLUMNS")                                                                                             = NULL
ioctl(1, 21523, 0x7fff827ae910)                                                                               = 0
getenv("TABSIZE")                                                                                             = NULL
getopt_long(1, 0x7fff827aea38, "abcdfghiklmnopqrstuvw:xABCDFGHI:"..., 0x00416a60, -1)                         = -1
__errno_location()                                                                                            = 0x7f89323f16a8
malloc(40)                                                                                                    = 0x02543870
memcpy(0x02543870, "", 40)                                                                                    = 0x02543870
__errno_location()                                                                                            = 0x7f89323f16a8
malloc(40)                                                                                                    = 0x025438a0
memcpy(0x025438a0, "", 40)                                                                                    = 0x025438a0
malloc(18400)                                                                                                 = 0x025438d0
malloc(32)                                                                                                    = 0x025434c0
strlen(".")                                                                                                   = 1
malloc(2)                                                                                                     = 0x025480c0
memcpy(0x025480c0, ".", 2)                                                                                    = 0x025480c0
__errno_location()                                                                                            = 0x7f89323f16a8
opendir(".")                                                                                                  = 0x025480e0
readdir(0x025480e0)                                                                                           = 0x02548108
readdir(0x025480e0)                                                                                           = 0x02548120
readdir(0x025480e0)                                                                                           = 0x02548138
readdir(0x025480e0)                                                                                           = 0x02548150
strlen("Tex")                                                                                                 = 3
malloc(4)                                                                                                     = 0x02550110
memcpy(0x02550110, "Tex", 4)                                                                                  = 0x02550110
readdir(0x025480e0)                                                                                           = 0x02548168
readdir(0x025480e0)                                                                                           = 0x02548188
strlen("makedoc")                                                                                             = 7
malloc(8)                                                                                                     = 0x02550130
memcpy(0x02550130, "makedoc", 8)                                                                              = 0x02550130
readdir(0x025480e0)                                                                                           = 0x025481a8
readdir(0x025480e0)                                                                                           = 0x025481c8
strlen("Docbook")                                                                                             = 7
malloc(8)                                                                                                     = 0x02550150
memcpy(0x02550150, "Docbook", 8)                                                                              = 0x02550150
readdir(0x025480e0)                                                                                           = NULL
closedir(0x025480e0)                                                                                          = 0
free(NULL)                                                                                                    = <void>
malloc(72)                                                                                                    = 0x025480e0
_setjmp(0x61c040, 0x25480e0, 0x2543af8, 3, 1)                                                                 = 0
__errno_location()                                                                                            = 0x7f89323f16a8
strcoll("makedoc", "Docbook")                                                                                 = 9
__errno_location()                                                                                            = 0x7f89323f16a8
strcoll("Tex", "Docbook")                                                                                     = 16
__errno_location()                                                                                            = 0x7f89323f16a8
strcoll("Tex", "makedoc")                                                                                     = 7
memcpy(0x025480f0, "\3208T\002", 8)                                                                           = 0x025480f0
realloc(NULL, 144)                                                                                            = 0x02548130
malloc(168)                                                                                                   = 0x025481d0
__errno_location()                                                                                            = 0x7f89323f16a8
__ctype_get_mb_cur_max(0x7fff827ac0e0, 8192, 0x2550150, -1, 0)                                                = 6
__ctype_get_mb_cur_max(0x7fff827ac0e0, 8192, 0x2550150, 0x7fff827ac0e0, 0)                                    = 6
__errno_location()                                                                                            = 0x7f89323f16a8
__ctype_get_mb_cur_max(0x7fff827ac0e0, 8192, 0x2550130, -1, 0)                                                = 6
__ctype_get_mb_cur_max(0x7fff827ac0e0, 8192, 0x2550130, 0x7fff827ac0e0, 0)                                    = 6
__errno_location()                                                                                            = 0x7f89323f16a8
__ctype_get_mb_cur_max(0x7fff827ac0e0, 8192, 0x2550110, -1, 0)                                                = 6
__ctype_get_mb_cur_max(0x7fff827ac0e0, 8192, 0x2550110, 0x7fff827ac0e0, 0)                                    = 6
__errno_location()                                                                                            = 0x7f89323f16a8
__ctype_get_mb_cur_max(0x7fff827ac110, 8192, 0x2550150, -1, 0)                                                = 6
__ctype_get_mb_cur_max(0x7fff827ac110, 8192, 0x2550150, 0x7fff827ac110, 0)                                    = 6
__errno_location()                                                                                            = 0x7f89323f16a8
__ctype_get_mb_cur_max(0x7fff827ac050, 8192, 0x2550150, -1, 0)                                                = 6
__ctype_get_mb_cur_max(0x7fff827ac050, 8192, 0x2550150, 0x7fff827ac050, 0)                                    = 6
fwrite_unlocked("Docbook", 1, 7, 0x7f8931bab780)                                                              = 7
__overflow(0x7f8931bab780, 32, 0, 8, 0xffffffff)                                                              = 32
__overflow(0x7f8931bab780, 32, 1, 8, 0xffffffff)                                                              = 32
__errno_location()                                                                                            = 0x7f89323f16a8
__ctype_get_mb_cur_max(0x7fff827ac110, 8192, 0x2550130, -1, 0)                                                = 6
__ctype_get_mb_cur_max(0x7fff827ac110, 8192, 0x2550130, 0x7fff827ac110, 0)                                    = 6
__errno_location()                                                                                            = 0x7f89323f16a8
__ctype_get_mb_cur_max(0x7fff827ac050, 8192, 0x2550130, -1, 0)                                                = 6
__ctype_get_mb_cur_max(0x7fff827ac050, 8192, 0x2550130, 0x7fff827ac050, 0)                                    = 6
fwrite_unlocked("makedoc", 1, 7, 0x7f8931bab780)                                                              = 7
__overflow(0x7f8931bab780, 32, 1, 8, 7)                                                                       = 32
__overflow(0x7f8931bab780, 32, 2, 8, 7)                                                                       = 32
__errno_location()                                                                                            = 0x7f89323f16a8
__ctype_get_mb_cur_max(0x7fff827ac110, 8192, 0x2550110, -1, 0)                                                = 6
__ctype_get_mb_cur_max(0x7fff827ac110, 8192, 0x2550110, 0x7fff827ac110, 0)                                    = 6
__errno_location()                                                                                            = 0x7f89323f16a8
__ctype_get_mb_cur_max(0x7fff827ac050, 8192, 0x2550110, -1, 0)                                                = 6
__ctype_get_mb_cur_max(0x7fff827ac050, 8192, 0x2550110, 0x7fff827ac050, 0)                                    = 6
fwrite_unlocked("Tex", 1, 3, 0x7f8931bab780)                                                                  = 3
__overflow(0x7f8931bab780, 10, 0, 120, 3Docbook  makedoc  Tex
)                                                                     = 10
free(0x025480c0)                                                                                              = <void>
free(NULL)                                                                                                    = <void>
free(0x025434c0)                                                                                              = <void>
exit(0 <unfinished ...>
__fpending(0x7f8931bab780, 0, 0x7f8931bac330, 0x7f8931bac330, 0x25434b0)                                      = 0
fclose(0x7f8931bab780)                                                                                        = 0
__fpending(0x7f8931bab860, 0, 0x7f8931bacdf0, 0, 0x7f89323f17a0)                                              = 0
fclose(0x7f8931bab860)                                                                                        = 0
+++ exited (status 0) +++
		]]>
		</screen>
	</section>
	
	
	<section id="nm">
		<title>nm - list symbols from object files</title>
		<para>列出对象文件中的符号。</para>
		<screen>
		<![CDATA[
$ nm libzeromq.so 
                 U asprintf@@GLIBC_2.2.5
00000000002020d0 B __bss_start
00000000002020d0 b completed.6992
0000000000000f25 T concat
                 w __cxa_finalize@@GLIBC_2.2.5
0000000000000e40 t deregister_tm_clones
0000000000000eb0 t __do_global_dtors_aux
0000000000201de8 t __do_global_dtors_aux_fini_array_entry
00000000002020c8 d __dso_handle
0000000000201df8 d _DYNAMIC
00000000002020d0 D _edata
00000000002020d8 B _end
0000000000001710 T _fini
0000000000000ef0 t frame_dummy
0000000000201de0 t __frame_dummy_init_array_entry
0000000000001ab8 r __FRAME_END__
                 U free@@GLIBC_2.2.5
0000000000202000 d _GLOBAL_OFFSET_TABLE_
                 w __gmon_start__
0000000000000ca8 T _init
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
0000000000201df0 d __JCR_END__
0000000000201df0 d __JCR_LIST__
                 w _Jv_RegisterClasses
                 U malloc@@GLIBC_2.2.5
                 U memcpy@@GLIBC_2.14
                 U memset@@GLIBC_2.2.5
0000000000000e70 t register_tm_clones
                 U __stack_chk_fail@@GLIBC_2.4
                 U strlen@@GLIBC_2.2.5
                 U strncpy@@GLIBC_2.2.5
00000000002020d0 d __TMC_END__
0000000000001399 T zmq_client
000000000000151f T zmq_client_deinit
0000000000001346 T zmq_client_init
                 U zmq_close
                 U zmq_connect
                 U zmq_ctx_destroy
                 U zmq_ctx_new
                 U zmq_msg_close
                 U zmq_msg_data
                 U zmq_msg_init
                 U zmq_msg_init_size
                 U zmq_msg_size
000000000000157d T zmq_publish
0000000000001703 T zmq_publish_deinit
000000000000152a T zmq_publish_init
0000000000000fae T zmq_read
0000000000001157 T zmq_read_deinit
0000000000000f5b T zmq_read_init
                 U zmq_recvmsg
                 U zmq_sendmsg
                 U zmq_socket
00000000000011b5 T zmq_write
000000000000133b T zmq_write_deinit
0000000000001162 T zmq_write_init
		]]>
		</screen>
	</section>
	<section id="strings">
		<title>strings - print the strings of printable characters in files.</title>
		<para>打印文件中的可打印字符的字符串。</para>
		<para>二进制文件中有很多文本信息，比如打印信息、调试信息、帮助信息、错误等。只要这些信息都存在于二进制文件中，就可以用 strings 命令将其转储到屏幕上。</para>
		<screen>
		<![CDATA[
[root@localhost ~]# strings /bin/ls | grep "list"
%s: not listing already-listed directory
  -A, --almost-all           do not list implied . and ..
  -B, --ignore-backups       do not list implied entries ending with ~
  -C                         list entries by columns
  -d, --directory            list directories themselves, not their contents
  -g                         like -l, but do not list owner
  -G, --no-group             in a long listing, don't print group names
                             follow symbolic links listed on the command line
      --hide=PATTERN         do not list implied entries matching shell PATTERN
  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN
  -l                         use a long listing format
  -m                         fill width with a comma separated list of entries
  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs
  -o                         like -l, but do not list group information
  -R, --recursive            list subdirectories recursively
  -U                         do not sort; list entries in directory order
  -x                         list entries by lines instead of by columns
  -1                         list one file per line.  Avoid '\n' with -q or -b		
		]]>
		</screen>
	</section>
	<section>
		<title>hexdump</title>
		<para>以 ASCII、十进制、十六进制或八进制显示文件内容。</para>
		<screen>
		<![CDATA[
[root@localhost ~]# hexdump -C /bin/ls | head 
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  03 00 3e 00 01 00 00 00  00 5e 00 00 00 00 00 00  |..>......^......|
00000020  40 00 00 00 00 00 00 00  38 0b 04 00 00 00 00 00  |@.......8.......|
00000030  00 00 00 00 40 00 38 00  0a 00 40 00 1f 00 1e 00  |....@.8...@.....|
00000040  06 00 00 00 04 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000050  40 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |@.......@.......|
00000060  30 02 00 00 00 00 00 00  30 02 00 00 00 00 00 00  |0.......0.......|
00000070  08 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00  |................|
00000080  70 02 00 00 00 00 00 00  70 02 00 00 00 00 00 00  |p.......p.......|
00000090  70 02 00 00 00 00 00 00  1c 00 00 00 00 00 00 00  |p...............|
		
neo@MacBook-Pro-Neo ~ % hexdump -C /bin/ls | head 
00000000  cf fa ed fe 07 00 00 01  03 00 00 00 02 00 00 00  |................|
00000010  13 00 00 00 10 07 00 00  85 00 20 00 00 00 00 00  |.......... .....|
00000020  19 00 00 00 48 00 00 00  5f 5f 50 41 47 45 5a 45  |....H...__PAGEZE|
00000030  52 4f 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |RO..............|
00000040  00 00 00 00 01 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  19 00 00 00 28 02 00 00  |............(...|
00000070  5f 5f 54 45 58 54 00 00  00 00 00 00 00 00 00 00  |__TEXT..........|
00000080  00 00 00 00 01 00 00 00  00 50 00 00 00 00 00 00  |.........P......|
00000090  00 00 00 00 00 00 00 00  00 50 00 00 00 00 00 00  |.........P......|
		]]>
		</screen>
	</section>
	<section id="objdump">
		<title>objdump - display information from object files.</title>
		<para>从对象文件中显示信息。</para>
		<screen>
		<![CDATA[
[root@localhost ~]# objdump -d /bin/ls | head

/bin/ls:     file format elf64-x86-64


Disassembly of section .init:

0000000000003538 <.init>:
    3538:	f3 0f 1e fa          	endbr64 
    353c:	48 83 ec 08          	sub    $0x8,%rsp
    3540:	48 8b 05 69 da 21 00 	mov    0x21da69(%rip),%rax        # 220fb0 <__gmon_start__>		
		]]>
		</screen>
	</section>
	<section id="readelf">
		<title>readelf - Displays information about ELF files.</title>
		<para>显示有关 ELF (Executable and Linkable File Format 可执行和可链接文件格式) 文件的信息。</para>
		<screen>
		<![CDATA[
[root@localhost ~]# readelf -h /bin/ls
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              DYN (Shared object file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x5e00
  Start of program headers:          64 (bytes into file)
  Start of section headers:          265016 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         10
  Size of section headers:           64 (bytes)
  Number of section headers:         31
  Section header string table index: 30		
		]]>
		</screen>
		
	</section>
	<section id="valgrind">
		<title>Valgrind</title>
		<para>http://valgrind.org/</para>
		<screen>
		<![CDATA[
valgrind --tool=memcheck --leak-check=full ./test
		]]>
		</screen>
	</section>
</chapter>
