<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: chapter.perl.module.xml 624 2013-06-21 10:50:00Z netkiller $ -->
<chapter id="index"><?dbhtml dir="modules" ?>
	<title>Perl Module</title>
	<para>How do I install XML::Simple?</para>
	<para>On Unix systems, try:</para>
	<screen>
 perl -MCPAN -e 'install XML::Simple'
	</screen>
	<para>If that doesn't work, download the latest distribution from ftp://ftp.cpan.org/pub/CPAN/authors/id/G/GR/GRANTM , unpack it and run these commands:</para>
	<screen>
perl Makefile.PL
make
make test
make install
	</screen>
	<para>On Win32, if you have a recent build of ActiveState Perl (618 or better) try this command:</para>
	<screen>
ppm install XML::Simple
	</screen>
	<section id="module.bulid">
		<title>Module::Build</title>
		<procedure>
			<title>Module::Build step by setp</title>
			<step>
				<para>Build.PL</para>
				<screen>
$ cat Build.PL
use Module::Build;

Module::Build->new
(	module_name => 'My::Module',
	license => 'perl',
    dist_version => '1.0',
)->create_build_script;
				</screen>
			</step>
			<step>
				<para>perl Build.PL</para>
				<screen>
$ perl Build.PL
Checking prerequisites...
Looks good

Creating new 'Build' script for 'My-Module' version '1.0'
				</screen>
			</step>
			<step>
				<para>Build</para>
				<screen>
$ ./Build
Copying lib/My/Module.pm -> blib/lib/My/Module.pm
				</screen>
			</step>
			<step>
				<para>Build test</para>
				<screen>
$ ./Build test
t/hello....ok
All tests successful.
Files=1, Tests=1,  0 wallclock secs ( 0.02 cusr +  0.01 csys =  0.03 CPU)
				</screen>
				<para>--test_files</para>
				<screen>
$ ./Build test --test_files t/hello.t
				</screen>
			</step>
		</procedure>
		</section>

		<section>
		<title>ExtUtils::MakeMaker</title>
		<para>I suggest that you use Module::Build instead of ExtUtils::MakeMaker.</para>
		<procedure>
			<title>MakeMaker</title>
			<step>
				<para>Makefile.PL</para>
				<screen>
use ExtUtils::MakeMaker;

WriteMakefile(NAME      => 'Hello',
              VERSION   => '1.00',
              EXE_FILES => ['hello']
);

				</screen>
			</step>
			<step>
				<para>MANIFEST</para>
				<screen>
Makefile.PL
hello
				</screen>
			</step>
			<step>
				<para>hello </para>
				<screen>
#!/usr/bin/env perl

use strict;
use warnings;

print "Hello, world!\n";
				</screen>
				<para>$ chmod u+x hello</para>
			</step>
			<step>
				<para>$ perl Makefile.PL</para>
				<screen>
neo@master:~/neo/unit-test$ perl Makefile.PL
Checking if your kit is complete...
Looks good
Writing Makefile for Hello

				</screen>
			</step>
			<step>
				<para>$ make dist</para>
				<screen>
neo@master:~/neo/unit-test$ make dist
rm -rf Hello-1.00
\/usr/bin/perl "-MExtUtils::Manifest=manicopy,maniread" \
                -e "manicopy(maniread(),'Hello-1.00', 'best');"
mkdir Hello-1.00
Generating META.yml
Could not add META.yml to MANIFEST: Could not open MANIFEST: No such file or directory at /usr/share/perl/5.8/ExtUtils/Manifest.pm line 565.

tar cvf Hello-1.00.tar Hello-1.00
Hello-1.00/
Hello-1.00/hello
Hello-1.00/META.yml
Hello-1.00/Makefile.PL
rm -rf Hello-1.00
gzip --best Hello-1.00.tar

neo@master:~/neo/unit-test$ ls
hello  Hello-1.00.tar.gz  Makefile  Makefile.PL  MANIFEST
				</screen>
				<para>get tarball ready to install with tar zxvf Hello-1.00.tar.gz; cd Hello-1.00; perl Makefile.PL; make; make install</para>
			</step>
			<step>
				<para>test</para>
				<screen>
make test
				</screen>
				<para>TEST_FILE</para>
				<screen>
make test TEST_FILE=t/hello.t
				</screen>
				<para>testdb</para>
				<screen>
make testdb TEST_FILE=t/hello.t
				</screen>
			</step>
		</procedure>
		</section>

		<section id="module.test">
		<title>Test::Simple</title>
		<procedure>
			<title>setp by setp</title>
			<step>
				<para>My::Test::English</para>
				<screen>
$ mkdir -p lib/My/Test/
$ vim lib/My/Test/English.pm
				</screen>
				<para></para>
				<screen>
package My::Test::English;

# 返回单词的复数
sub plural {

    my $word = shift;

    # 以s/x/sh/ch结尾的情况
    if ( $word =~ /(s|x|sh|ch)$/ ) {
        $word .= 'es';
    }

    # 以辅音+y结尾的情况
    elsif ( $word =~ /[^aeiou]y$/ ) {
        $word =~ s/y$/ies/;
    }

    # 以f结尾的情况
    elsif ( $word =~ /f$/ ) {
        $word =~ s/f$/ves/;
    }

    # 其他情况
    else {
        $word .= 's';
    }

    return $word;
}

1;
				</screen>
			</step>
			<step>
				<para>plural.t</para>
				<para>$ vim t/plural.t</para>
				<screen>
#!/usr/bin/perl

use My::Test::English;
use Test::Simple qw(no_plan);

BEGIN{ use lib qw(My/Test) }

sub plural { My::Test::English::plural(shift) }

ok (plural('diff')      eq 'difves',    plural('diff'));
ok (plural('try')       eq 'tries',     plural('try'));
ok (plural('book')      eq 'books',     plural('book'));
ok (plural('finish')eq 'finish',        plural('finish'));
ok (plural('work') eq 'works',          'works');
				</screen>
			</step>
			<step>
				<para>Build test</para>
				<screen>
$ ./Build test --test_files t/plural.t --verbose 1
				</screen>
			</step>
		</procedure>
		</section>

		<section>
		<title>Test::More</title>
		<procedure>
			<title>Test::More setp by setp</title>
			<step>
				<para>use Test::More qw(no_plan);</para>
			</step>
			<step>
				<para>ok($got eq $expected, $test_name);</para>
				<screen>
ok( $exp{9} == 81,                   'simple exponential' );
ok( Film->can('db_Main'),            'set_db()' );
ok( $p->tests == 4,                  'saw tests' );
ok( !grep !defined $_, @items,       'items populated' );
				</screen>
				<para></para>
				<para></para>
			</step>

		</procedure>
	</section>
	<section id="module.xml">
		<title>XML::Simple</title>
		<programlisting role="perl">
		<![CDATA[
use strict;
use XML::Simple qw(:strict);

my $xml =q(<?xml version='1.0'?>
<library>
  <book>
    <isbn>0596001320</isbn>
    <title>Learning Perl, 3rd Edition</title>
    <author>Randal L. Schwartz</author>
    <author>Tom Phoenix</author>
  </book>
  <book>
    <isbn>1565922204</isbn>
    <title>Advanced Perl Programming</title>
    <author>Sriram Srinivasan</author>
  </book>
  <book>
    <isbn>076455106X</isbn>
    <title>Guitar for Dummies</title>
    <author>Mark Phillips</author>
    <author>John Chappell</author>
  </book>
</library>
);

my $library = XMLin($xml);

foreach my $book (@{$library->{book}}) {
  print "$book->{title}\n";
  print "  $_\n" foreach(@{$book->{author}});
}
		]]>
		</programlisting>

		<programlisting role="perl">
		<![CDATA[

		]]>
		</programlisting>
	</section>
	<section id="module.lwp">
		<title>LWP::Simple</title>
		<programlisting>
		<![CDATA[
use LWP::Simple;

my url = 'http://netkiller.8800.org/neo.pdf';

my $file = '/tmp/neo.pdf';

getstore($url, $file);
		]]>
		</programlisting>
	</section>
	<section id="module.date">
		<title>Date::Manip</title>
		<programlisting>
		<![CDATA[
use Date::Manip;

sub _time_limit {
    my ($self, $date, $limit) = @_;
    my $now = localtime(time());
    my $current_date = ParseDate($now);
    my $pub_date = ParseDate($date);
    my $limit_date = DateCalc($current_date, "-$limit month");
    $pub_date =~ s/\:.*$//;
    $limit_date =~ s/\:.*$//;
    if ($pub_date > $limit_date) {
        return 1;
    }else{
        return 0;
    }
		]]>
		</programlisting>
	</section>
	<section id="module.parameter">
		<title>Parameter</title>
		<section>
			<title>Getopt::Std</title>
			<screen>
#!/usr/bin/perl -w
use Getopt::Std;
Getopt::Std::getopts('a:b:c:de', \%options);
print "-a:$options{a} ";
print "-b:$options{b} ";
print "-c:$options{c} ";
print "-d:$options{d} ";
print "-e:$options{e} ";
			</screen>
		</section>
		<section>
			<title>Getopt::Long</title>
			<screen>
#!/usr/bin/perl
use Getopt::Long;
Getopt::Long::GetOptions(
                 'page=i'     => $page,
                 'onoff!'     => $onoff,
                 'help'       => $wants_help,
                 'name=s'     => $name,
                 'number:i'   => $number);
if(defined($page)){
         print "page flag set to $page ";
}
if(defined($onoff)){
         print "onoff flag set to $onoff ";
}
if(defined($wants_help)){
         print "help flag set to $wants_help ";
}
if(defined($name)){
         print "name flag set to $name ";
}
if(defined($number)){
         print "number flag set to $number ";
}
			</screen>
		</section>
	</section>
	<section id="module.text">
		<title>Encode/Decode</title>

		<section>
			<title>Text::Iconv</title>
			<screen>
use Text::Iconv;
$converter = Text::Iconv->new("fromcode", "tocode");
$converted = $converter->convert("Text to convert");
			</screen>
		</section>
		<section>
			<title>Encode::Guess -- Guesses encoding from data</title>
			<para>http://perldoc.perl.org/Encode/Guess.html</para>
			<screen>
			<![CDATA[
  # if you are sure $data won't contain anything bogus

  use Encode;
  use Encode::Guess qw/euc-jp shiftjis 7bit-jis/;
  my $utf8 = decode("Guess", $data);
  my $data = encode("Guess", $utf8);   # this doesn't work!

  # more elaborate way
  use Encode::Guess;
  my $enc = guess_encoding($data, qw/euc-jp shiftjis 7bit-jis/);
  ref($enc) or die "Can't guess: $enc"; # trap error this way
  $utf8 = $enc->decode($data);
  # or
  $utf8 = decode($enc->name, $data)
			]]>
			</screen>
		</section>
		<section>
			<title>URI::Escape</title>
			<programlisting>
 use URI::Escape;
 $safe = uri_escape("10% is enough\n");
 $verysafe = uri_escape("foo", "\0-\377");
 $str  = uri_unescape($safe);
			</programlisting>
		</section>
	</section>
	<section id="module.net">
		<title>Net::SSH::Expect</title>
		<screen>
cpan install Net::SSH::Expect
		</screen>
		<screen>
		<![CDATA[
#!/usr/bin/perl

use strict;
use warnings;
use Net::SSH::Expect;

my $ssh = Net::SSH::Expect->new(
    host    => 'localhost',
    user    => 'someuser',
    password => 'somepassword'
);

warn "Starting SSH...";
$ssh->run_ssh();

warn "Testing login output...";
my $login_output = $ssh->login();
print " Done", "\n";

my $who = $ssh->exec('who');
print($who);

my $exp = 'who';
$exp = $ssh->get_expect();
$exp->interact();
		]]>
		</screen>
	</section>
	<section id="module.udpm">
		<title>UDPM - Perl extension for User Dialogs</title>
		<para><ulink url="http://udpm.sourceforge.net" /></para>
		<para>Synopsis</para>
		<screen>
		<![CDATA[
use UDPM;
my $d = new UDPM ({'backtitle'=>'Demo','colours'=>1,'cr-wrap'=>1,
                   'height'=>20,'width'=>70,'list-height'=>5,
                   'no-shadows'=>1});

$d->msgbox({'title'=>'Welcome!',
            'text'=>'[B]Welcome[/B] [U]one[/U] and [R]all[/R]!'});
		]]>
		</screen>
	</section>
	<section id="module.curses">
		<title>Curses::UI</title>
		<para><ulink url="http://search.cpan.org/dist/Curses-UI/" /></para>
		<para></para>
		<screen>
		<![CDATA[

		]]>
		</screen>
	</section>
	<section id="www.mechanize">
		<title>WWW::Mechanize</title>
		<para>http://search.cpan.org/~jesse/WWW-Mechanize-1.72/lib/WWW/Mechanize/Examples.pod</para>
		<screen>
		<![CDATA[
#!/usr/bin/perl

use WWW::Mechanize;
my $mech = WWW::Mechanize->new();

$url = 'http://localhost/form.php';
$mech->get( $url );

  $mech->submit_form(
        form_number => 1,
        fields      => {
            fname    => 'www',
            lname    => 'mechanize',
        }
    );

print $mech->content();		
		]]>
		</screen>
	</section>
</chapter>
