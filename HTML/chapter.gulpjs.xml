<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="gulpjs" ?>
	<title>gulpjs</title>
	<!-- https://julienrenaux.fr/2014/05/25/introduction-to-gulp-js-with-practical-examples/ -->
	<para>安装</para>
	<screen>
npm install gulp-cli
npm install gulp -D
	</screen>
	<para>创建  gulpfile.js 文件</para>
	<screen>
	<![CDATA[
var gulp = require('gulp');
var pug = require('gulp-pug');
var less = require('gulp-less');
var minifyCSS = require('gulp-csso');

gulp.task('html', function(){
  return gulp.src('client/templates/*.pug')
    .pipe(pug())
    .pipe(gulp.dest('build/html'))
});

gulp.task('css', function(){
  return gulp.src('client/templates/*.less')
    .pipe(less())
    .pipe(minifyCSS())
    .pipe(gulp.dest('build/css'))
});

gulp.task('default', [ 'html', 'css' ]);
	]]>
	</screen>
	<para>排除目录</para>
	<screen>
	<![CDATA[
gulp.src(['js/**/*.js', '!js/**/*.min.js'])
	]]>
	</screen>
	<para></para>
	<screen>
	<![CDATA[]]>
	</screen>
	<para></para>
	<screen>
	<![CDATA[]]>
	</screen>
	<para></para>
	<screen>
	<![CDATA[]]>
	</screen>
	<section id="gulp-minify-html">
		<title>HTML Minification</title>
		<para></para>
		<screen>
		<![CDATA[
npm install --save-dev gulp-minify-html
		]]>
		</screen>
		<para>gulpfile.js:</para>
		<screen>
		<![CDATA[
// including plugins
var gulp = require('gulp');
var minifyHtml = require("gulp-minify-html");
 
// task
gulp.task('minify-html', function () {
    gulp.src('./html/*.html') // path to your files
    .pipe(minifyHtml())
    .pipe(gulp.dest('path/to/destination'));
});		
		]]>
		</screen>
		<para></para>
		<screen>
		<![CDATA[
gulp minify-html
		]]>
		</screen>
	</section>
	<section id="gulp-minify-css">
		<title>CSS Minification</title>
		<section>
			<title>gulp-minify-css</title>
			<para></para>
			<screen>
			<![CDATA[
npm install --save-dev gulp-minify-css
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
// including plugins
var gulp = require('gulp');
var minifyCss = require("gulp-minify-css");
 
// task
gulp.task('minify-css', function () {
    gulp.src('./css/one.css') // path to your file
    .pipe(minifyCss())
    .pipe(gulp.dest('path/to/destination'));
});

// task
gulp.task('minify-multi-css', function () {
    gulp.src(__dirname+'/css/*.css') // path to your file
    .pipe(minifyCss())
    .pipe(gulp.dest('path/to/destination'));
});
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
gulp minify-css
gulp minify-multi-css
			]]>
			</screen>
		</section>
		<section id="gulp-clean-css">
			<title>gulp-clean-css</title>
			<screen>
			<![CDATA[
var gulp = require('gulp');
var minifycss = require('gulp-clean-css');
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var rename = require('gulp-rename');

gulp.task('minify-css', function () {

        gulp.src('./css/*.css')
        .pipe(concat("finally.css"))
        .pipe(rename({ suffix: '.min' }))
        .pipe(minifycss())
        .pipe(gulp.dest('build/css'));

});

gulp.task('minify-js', function(){

        gulp.src(__dirname + "/js/*.js")
        .pipe(concat("finally.js"))
        .pipe(rename({ suffix: '.min' }))
        .pipe(uglify())
        .pipe(gulp.dest('build/js'))

});
			]]>
			</screen>
			<para>compatibility</para>
			<screen>
			<![CDATA[
var gulp = require('gulp');
var cleanCSS = require('gulp-clean-css');
 
gulp.task('minify-css', function() {
  return gulp.src('styles/*.css')
    .pipe(cleanCSS({compatibility: 'ie8'}))
    .pipe(gulp.dest('dist'));
});			
			]]>
			</screen>
			<para>callback</para>
			<screen>
			<![CDATA[
var gulp = require('gulp');
var cleanCSS = require('gulp-clean-css');
 
gulp.task('minify-css', function() {
    return gulp.src('styles/*.css')
        .pipe(cleanCSS({debug: true}, function(details) {
            console.log(details.name + ': ' + details.stats.originalSize);
            console.log(details.name + ': ' + details.stats.minifiedSize);
        }))
        .pipe(gulp.dest('dist'));
});			
			]]>
			</screen>
		</section>
		<section id="gulp-make-css-url-version">
			<title>gulp-make-css-url-version</title>
			<para>给css文件里引用url加版本号（md5sum），像这样：</para>
			<screen>
			<![CDATA[
background: url(../images/pc-banner-bg.jpg?v=4facbd0914639f296faec4dba4d358f0) no-repeat;}
			]]>
			</screen>
			<screen>
			<![CDATA[
npm install --save-dev gulp-make-css-url-version 
			]]>			
			</screen>
			<screen>
			<![CDATA[
var gulp = require('gulp'),
minifier = require('gulp-minify-css');
cssver = require('gulp-make-css-url-version'); 
 
gulp.task('testCssmin', function () {
    gulp.src('src/css/*.css')
        .pipe(cssver()) //给css文件里引用文件加版本号（文件MD5）
        .pipe(minifier())
        .pipe(gulp.dest('dist/css'));
});			
			]]>
			</screen>
		</section>
	</section>
	<section id="gulp-uglify">
		<title>JS Minification</title>
		<para></para>
		<screen>
		<![CDATA[
npm install --save-dev gulp-uglify
		]]>
		</screen>
		<para>gulpfile.js:</para>
		<screen>
		<![CDATA[
// including plugins
var gulp = require('gulp');
var uglify = require("gulp-uglify");
 
// task
gulp.task('minify-js', function () {
    gulp.src('./JavaScript/*.js') // path to your files
    .pipe(uglify())
    .pipe(gulp.dest('path/to/destination'));
});
		]]>
		</screen>
		<para>Run:</para>
		<screen>
		<![CDATA[
gulp minify-js
		]]>
		</screen>
	</section>
	<section id="gulp-spriter">
		<title>CSS Sprite</title>
		<screen>
		<![CDATA[
简介
gulp-spriter：帮助前端工程师将css代码中的切片图片合并成雪碧图，支持retina图片。

功能
使用二叉树排列算法，对图片排序优化
自动收集css中带切片的图片（仅对background-image:url("slice/xx.png")有效）
自动在原来的css中添加background-position属性
支持生成适用于高清设备的雪碧图，并在css文件追加媒体查询css代码
依赖
gulp-spriter使用spritesmith作为图片生成的基础算法

安装
npm install gulp-spriter
配置
导入gulp-spriter依赖：

var spriter = require("gulp-spriter");
 
gulpfile配置文件中增加task，如下：

gulp.task("css",["clean"],function(){
  return gulp.src("./src/css/xxx.css")
         .pipe(spriter({
            sprite:"test.png",
            slice:"./src/slice",
            outpath:"./build/tests"
          }))
         .pipe(gulp.dest('./build/css'))
})
参数
sprite:[string] 必须，设置输出的雪碧图名称
slice：[string] 必须，切片文件存放位置，基于根目录
outpath：[string] 必须，输出的雪碧图位置
		]]>
		</screen>
		<screen>
		<![CDATA[]]>
		</screen>
	</section>
	<section id="gulp-imagemin">
		<title>Compress Images</title>
		<screen>
		<![CDATA[
var imagemin = require('gulp-imagemin');
 
gulp.task('images', function() {
  return gulp.src('src/images/**/*')
    .pipe(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true }))
    .pipe(gulp.dest('dist/assets/img'))
    .pipe(notify({ message: 'Images task complete' }));
});		
		]]>
		</screen>
	</section>
	<section id="gulp-sass">
		<title>Sass Compilation</title>
		<para>Using gulp-sass</para>
		<screen>
		<![CDATA[
npm install --save-dev gulp-sass
		]]>
		</screen>
		<para>gulpfile.js:</para>
		<screen>
		<![CDATA[
// including plugins
var gulp = require('gulp');
var sass = require("gulp-sass");
 
// task
gulp.task('compile-sass', function () {
    gulp.src('./Sass/one.sass') // path to your file
    .pipe(sass())
    .pipe(gulp.dest('path/to/destination'));
});
		]]>
		</screen>
		<para>Run:</para>
		<screen>
		<![CDATA[
gulp compile-sass
		]]>
		</screen>
	</section>
	<section id="gulp-less">
		<title>Less Compilation</title>
		<para>Using gulp-less</para>
		<screen>
		<![CDATA[
npm install --save-dev gulp-less
		]]>
		</screen>
		<para>gulpfile.js:</para>
		<screen>
		<![CDATA[
// including plugins
var gulp = require('gulp');
var less = require("gulp-less");

// task
gulp.task('compile-less', function () {
    gulp.src('./Less/one.less') // path to your file
    .pipe(less())
    .pipe(gulp.dest('path/to/destination'));
});	
		]]>
		</screen>
		<para>Run:</para>
		<screen>
		<![CDATA[
gulp compile-less
		]]>
		</screen>
	</section>	
	
	<section id="gulp-rename">
		<title>重命名文件名</title>
		<screen>
		<![CDATA[
Using gulp-rename

npm install --save-dev gulp-rename
		]]>
		</screen>
		<para>gulpfile.js:</para>
		<screen>
		<![CDATA[
// including plugins
var gulp = require('gulp');
var rename = require('gulp-rename');
var coffee = require("gulp-coffee");
 
// task
gulp.task('rename', function () {
    gulp.src('./CoffeeScript/one.coffee') // path to your file
    .pipe(coffee())  // compile coffeeScript
    .pipe(rename('renamed.js')) // rename into "renamed.js" (original name "one.js")
    .pipe(gulp.dest('path/to/destination'));
});
		]]>
		</screen>
		<para>Run:</para>
		<screen>
		<![CDATA[
gulp rename
		]]>
		</screen>
	</section>
	<section id="gulp-concat">
		<title>合并文件</title>
		<para>Concatenate files using gulp-concat</para>
		<screen>
		<![CDATA[
npm install --save-dev gulp-concat		
		]]>
		</screen>
		<para>gulpfile.js:</para>
		<screen>
		<![CDATA[
// including plugins
var gulp = require('gulp');
var concat = require("gulp-concat");
 
// task
gulp.task('concat', function () {
    gulp.src('./javascript/*.js') // path to your files
    .pipe(concat('concat.js'))  // concat and name it "concat.js"
    .pipe(gulp.dest('path/to/destination'));
});
		]]>
		</screen>
		<para>Run:</para>
		<screen>
		<![CDATA[
gulp concat			
		]]>
		</screen>
	</section>
	<section id="gulp-header">
		<title>文件头</title>
		<screen>
		<![CDATA[
Using gulp-header and Node’s file system

npm install --save-dev gulp-header		
		]]>
		</screen>
		<para>Copyright 头文件</para>
		<screen>
		<![CDATA[
# vim Copyright

/*
Author: netkiller <netkiller@msn.com>
Website: https://www.netkiller.cn
Version: <%= version %>
*/
		]]>
		</screen>
		<para>Version 文件</para>
		<screen>
		<![CDATA[
# vim Version
1.0.0
		]]>
		</screen>
		<para>gulpfile.js:</para>
		<screen>
		<![CDATA[
// including plugins
var gulp = require('gulp')
, fs = require('fs')
, concat = require("gulp-concat")
, header = require("gulp-header");
 
// functions
 
// Get version using NodeJs file system
var getVersion = function () {
    return fs.readFileSync('Version');
};
 
// Get copyright using NodeJs file system
var getCopyright = function () {
    return fs.readFileSync('Copyright');
};
 
// task
gulp.task('concat-copyright-version', function () {
    gulp.src('./javascript/*.js')
    .pipe(concat('finaly.js')) // concat and name it "concat-copyright-version.js"
    .pipe(header(getCopyrightVersion(), {version: getVersion()}))
    .pipe(gulp.dest('path/to/destination'));
});
		]]>
		</screen>
		<para>Run:</para>
		<screen>
		<![CDATA[
gulp concat-copyright-version			
		]]>
		</screen>
	</section>
	<section id="task">
		<title>Tasks automation</title>
		<screen>
		<![CDATA[
// including plugins
var gulp = require('gulp');
var watch = require('gulp-watch');

gulp.task('watch', function() {
    watch(__dirname + "/css/**/*.css", function() {
        gulp.run('minify-css');
    });
    watch(__dirname + "/js/**/*.js", function() {
        gulp.run('minify-js');
    });
});		
		]]>
		</screen>
		<screen>
		<![CDATA[
gulp watch		
		]]>
		</screen>
		<section id="notify">
			<title>notify</title>
			<screen>
var notify = require('gulp-notify');
			</screen>
			<screen>
			<![CDATA[
.pipe(notify({ message: 'Styles task complete' }));
			]]>
			</screen>
		</section>
		<section>
			<title>del</title>
			<screen>
			<![CDATA[
// Clean
gulp.task('clean', function() {
	return del(['dist/styles', 'dist/scripts', 'dist/images']);
});
			]]>
			</screen>
		</section>
		<section>
			<title>start</title>
			<screen>
			<![CDATA[
// Default task
gulp.task('default', ['clean'], function() {
	gulp.start('styles', 'scripts', 'images');
});
			]]>
			</screen>
		</section>
	</section>
	<section id="yargs">
		<title>yargs 命令行参数传递</title>
		<para></para>
		<screen>
		<![CDATA[
npm install --save-dev yargs
		]]>
		</screen>
		
		<screen>
		<![CDATA[
var argv = require('yargs').argv;

gulp.task('my-task', function() {
    return gulp.src(argv.a == 1 ? options.SCSS_SOURCE : options.OTHER_SOURCE)
        .pipe(sass({style:'nested'}))
        .pipe(autoprefixer('last 10 version'))
        .pipe(concat('style.css'))
        .pipe(gulp.dest(options.SCSS_DEST));
});		
		]]>
		</screen>
		<screen>
		<![CDATA[
var argv = require('yargs').argv,
    gulpif = require('gulp-if'),
    rename = require('gulp-rename'),
    uglify = require('gulp-uglify');

gulp.task('my-task-stage', function() {
  gulp.src('src/**/*.js')
    .pipe(concat('out.js'))
    .pipe(gulpif(argv.production, uglify()))
    .pipe(gulpif(argv.production, rename({suffix: '.min'})))
    .pipe(gulp.dest('dist/'));
});		
		]]>
		</screen>
		<screen>
		<![CDATA[
gulp my-task -a 1
gulp my-task-stage --production
		]]>
		</screen>
		<section id="gulp-util">
			<title>gulp-util</title>
			<screen>
			<![CDATA[
var util = require('gulp-util');

gulp.task('styles', function() {
  return gulp.src(['src/styles/' + (util.env.theme ? util.env.theme : 'main') + '.scss'])
    .pipe(compass({
        config_file: './config.rb',
        sass   : 'src/styles',
        css    : 'dist/styles',
        style  : 'expanded'

    }))
    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'ff 17', 'opera 12.1', 'ios 6', 'android 4'))
    .pipe(livereload(server))
    .pipe(gulp.dest('dist/styles'))
    .pipe(notify({ message: 'Styles task complete' }));
});		
			]]>
			</screen>
			<screen>
gulp watch --theme literature
			</screen>
		</section>
		<section id="minimist">
			<title>minimist</title>
			<screen>
			<![CDATA[
var gulp   = require('gulp');

// npm install gulp yargs gulp-if gulp-uglify
var args   = require('yargs').argv;
var gulpif = require('gulp-if');
var uglify = require('gulp-uglify');

var isProduction = args.env === 'production';

gulp.task('scripts', function() {
  return gulp.src('**/*.js')
    .pipe(gulpif(isProduction, uglify())) // only minify if production
    .pipe(gulp.dest('dist'));
});

gulp scripts --env production
			]]>
			</screen>
			<screen>
			<![CDATA[
Pass arguments from the command line

// npm install --save-dev gulp gulp-if gulp-uglify minimist

var gulp = require('gulp');
var gulpif = require('gulp-if');
var uglify = require('gulp-uglify');

var minimist = require('minimist');

var knownOptions = {
  string: 'env',
  default: { env: process.env.NODE_ENV || 'production' }
};

var options = minimist(process.argv.slice(2), knownOptions);

gulp.task('scripts', function() {
  return gulp.src('**/*.js')
    .pipe(gulpif(options.env === 'production', uglify())) // only minify in production
    .pipe(gulp.dest('dist'));
});
Then run gulp with:

$ gulp scripts --env development
			]]>
			</screen>
		</section>
	</section>

	
	<section id="gulp-sourcemaps">
		<title>gulp-sourcemaps</title>
		<screen>
		<![CDATA[
var gulp = require('gulp');
var plugin1 = require('gulp-plugin1');
var plugin2 = require('gulp-plugin2');
var sourcemaps = require('gulp-sourcemaps');

gulp.task('javascript', function() {
  gulp.src('src/**/*.js')
    .pipe(sourcemaps.init())
      .pipe(plugin1())
      .pipe(plugin2())
    .pipe(sourcemaps.write())
    .pipe(gulp.dest('dist'));
});	
		]]>
		</screen>
	</section>
	<section id="gulp-zip">
		<title>gulp-zip</title>
		<screen>
		<![CDATA[	
var gulp             = require( 'gulp' ),
    zip              = require( 'gulp-zip' );

gulp.task( 'zip', function() {

  return gulp.src( [
    '!{.gitignore,README.md}',
    '!node_modules', '!node_modules/**',
    '!dist', '!dist/**',
    './**',
  ] )
    .pipe( zip('archive.zip') )
    .pipe( gulp.dest( 'dist' ) );

});	
		]]>
		</screen>
	</section>
	<section>
		<title></title>
		<screen>
		<![CDATA[
		]]>
		</screen>
	</section>
	<section id="gulpjs.example">
		<title>Example</title>
		<section>
			<title>HTML,JS,CSS</title>		
			<para></para>
			<screen>
			<![CDATA[
var gulp = require('gulp');
var minifyHtml = require("gulp-minify-html");
var minifycss = require('gulp-clean-css');
//var minifycss = require("gulp-minify-css");
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var rename = require('gulp-rename');
var path = require("path");
var glob = require("glob");
var watch = require('gulp-watch');

gulp.task('minify-html', function () {
    gulp.src('./*.html')
    .pipe(minifyHtml())
    .pipe(gulp.dest('build/'));
});

gulp.task('minify-css', function () {

	gulp.src('./css/*.css')
	.pipe(concat("finally.css"))
	.pipe(rename({ suffix: '.min' }))
	.pipe(minifycss())
	.pipe(gulp.dest('build/css'));

});

gulp.task('minify-js', function(){

	gulp.src(__dirname + "/js/*.js")
	.pipe(concat("finally.js"))
        .pipe(rename({ suffix: '.min' }))
	.pipe(uglify())
	.pipe(gulp.dest('build/js'))

});

gulp.task('default',function() {
    gulp.start('minify-css','minify-js');
});

gulp.task('watch', function() {
    watch(__dirname + "/css/**/*.css", function() {
        gulp.run('minify-css');
    });
    watch(__dirname + "/js/**/*.js", function() {
        gulp.run('minify-js');
    });
});
			]]>
			</screen>
		</section>
		<section>
			<title>命令行传递参数</title>
			<screen>
			<![CDATA[]]>
			</screen>
			<screen>
			<![CDATA[
var gulp = require('gulp');
var argv = require('yargs').argv;
//var minifyHtml = require("gulp-minify-html");
var minifycss = require('gulp-clean-css');
//var minifycss = require("gulp-minify-css");
var spriter = require("gulp-spriter");
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var rename = require('gulp-rename');
var path = require("path");
var glob = require("glob");
var watch = require('gulp-watch');

//var src = __dirname + "/" + argv.stage + "/build/" + argv.src;
//var dest = __dirname + "/" + argv.stage + "/build/" + argv.src;
var src = __dirname + "/" + argv.src;
var dest = __dirname + "/dist/" + argv.src;
console.log(src);

gulp.task('minify-html', function () {
    gulp.src( src +'/*.html') // path to your files
    .pipe(minifyHtml())
    .pipe(gulp.dest( dest + '/'));
});

gulp.task('minify-css', function () {

	gulp.src(src + '/css/**/*.css')
	.pipe(concat("finally.css"))
	.pipe(rename({ suffix: '.min' }))
	.pipe(minifycss())
	.pipe(gulp.dest(dest + '/css'));

});

gulp.task('minify-js', function(){

	gulp.src(src + "/js/**/*.js")
	.pipe(concat("finally.js"))
        .pipe(rename({ suffix: '.min' }))
	.pipe(uglify())
	.pipe(gulp.dest( dest + '/js'))

});

gulp.task("spriter",["clean"],function(){
  return gulp.src( dest + "/css/finally.min.css")
         .pipe(spriter({
            sprite:"finally.png",
            slice: src + "/images",
            outpath: dest + "/images"
          }))
         .pipe(gulp.dest( dest + '/images'))
})


gulp.task('default',function() {
    gulp.start('minify-css','minify-js');
});

gulp.task('watch', function() {
    watch(src + "/css/**/*.css", function() {
        gulp.run('minify-css');
    });
    watch(src + "/js/**/*.js", function() {
        gulp.run('minify-js');
    });
});			
			]]>
			</screen>
			<screen>
			<![CDATA[]]>
			</screen>
		</section>
	</section>

</chapter>

<chapter id="sass">
	<title>sass</title>
</chapter>

<chapter id="webpack">
	<title>webpack</title>
</chapter>

<chapter id="yuicompressor">
	<title>minifier</title>
	<screen>
	<![CDATA[
#!/bin/bash

cd /usr/local/src/
wget https://github.com/yui/yuicompressor/releases/download/v2.4.8/yuicompressor-2.4.8.jar
mv yuicompressor-2.4.8.jar /usr/local/libexec/

cat >> /usr/local/bin/yuicompressor <<'EOF'
java -jar /usr/local/libexec/yuicompressor-2.4.8.jar $@
EOF

chmod +x /usr/local/bin/yuicompressor
		]]>
		</screen>
		<screen>
		<![CDATA[
$ yuicompressor

YUICompressor Version: 2.4.8

Usage: java -jar yuicompressor-2.4.8.jar [options] [input file]

Global Options
  -V, --version             Print version information
  -h, --help                Displays this information
  --type <js|css>           Specifies the type of the input file
  --charset <charset>       Read the input file using <charset>
  --line-break <column>     Insert a line break after the specified column number
  -v, --verbose             Display informational messages and warnings
  -o <file>                 Place the output into <file>. Defaults to stdout.
                            Multiple files can be processed using the following syntax:
                            java -jar yuicompressor.jar -o '.css$:-min.css' *.css
                            java -jar yuicompressor.jar -o '.js$:-min.js' *.js

JavaScript Options
  --nomunge                 Minify only, do not obfuscate
  --preserve-semi           Preserve all semicolons
  --disable-optimizations   Disable all micro optimizations

If no input file is specified, it defaults to stdin. In this case, the 'type'
option is required. Otherwise, the 'type' option is required only if the input
file extension is neither 'js' nor 'css'.
	]]>
	</screen>
</chapter>