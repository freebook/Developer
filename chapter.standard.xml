<?xml version="1.0" encoding="UTF-8"?>
<section id="standard">
	<title>标准与规范</title>
	<section id="project.dir">
		<title>Project directory</title>
		<para>一种很蠢目录规划：</para>
		<screen>
			project
			project/library
			project/log
			project/tmp
			project/...
		</screen>
		<para>目录规划原则，临时文件分离，日志分离，配置文件分离;这样有利于在负载均衡环境中克隆节点。</para>
		<itemizedlist>
			<listitem>
				<para>项目目录/workspace/project</para>
			</listitem>
			<listitem>
				<para>临时目录 /workspace/tmp/</para>
			</listitem>
			<listitem>
				<para>日志 目录/workspace/log/</para>
			</listitem>
			<listitem>
				<para>配置文件/workspace/conf</para>
			</listitem>
	
		</itemizedlist>
	</section>
	
<section id="svn.repos">
	<title>版本控制及如何运作</title>
	<section>
		<title>版本库布局</title>
		<orderedlist>
			<title>版本库布局</title>
			<listitem>trunk</listitem>
			<listitem>branches</listitem>
			<listitem>tags</listitem>
			<listitem>releases</listitem>
		</orderedlist>
		<para>多项目版本库布局</para>
		<screen>
			<![CDATA[
		 	                   /-> branches
		       .---> project 2 ---> trunk
		      / 	           \-> tags
		     /
		    /					/-> branches
repositories -------> project 1 ---> trunk
			\ 					\-> tags
			 \
			  \ 			   /-> branches
			   `---> project 3 ---> trunk
				               \-> tags
				]]>
		</screen>
	</section>
	<section>
		<title>策略</title>
		<!-- <para>软件开发过程中主干与分支运作的三种常用策略</para> <orderedlist> <listitem> 在主干上开发，分支做发布，发布好以后那个分支有BUG（主干可能也是有的），在分支上修改BUG。然后合并到主干。分支的发布 继续进行。这个一般适用于客户化软件工程的。 </listitem> <listitem> 主干一直保持一个最新的稳定版本，任何时候都可以提供一个应急的发布版本，保证随时能提供稳定的发布版本。而所有的新功 能、新技术实验全放在分支上去做开发，进行新技术的验证实验。等分支相对稳定以后，再合并到主干上形成稳定的发布版本。此 时就要更新主干，进行主干版本的升级。很多开源软件基本采取这种策略。 </listitem> <listitem> 3、还有一种就是这两者的混合，结合两者的优点，即保证随时可以有稳定的版本发布，又能保证客户化的版本分支开发功能及其客 户化版本的维护。 </listitem> </orderedlist> -->
		<para>trunk 主干，作为主干你要保证他的代码是可运行的。</para>
		<para>branches
			分支，代码来自主干，可以有很多分支，分支用于多个团队同步开发，最终要将代码合并到主干。例如：branches/member,
			branches/blog, branches/shop 分别来自不同的团队
		</para>
		<para>tags 一般用于做快照，一旦建立永不更改</para>
		<para>releases 发行本版，代码来自主干， 与tags功能一样，命名更直观。例如每个月为一个周期，发布一次代码
			releases/v1.0, releases/1.5
		</para>
		<screen>
			<![CDATA[
                          .-----------------------------------------------------------------------> cart r100 ---> ...
                         /		                                                                          ^
                        .----------------------> blog r3 ---> r4 ... ... r(10) ---> r(n) ---> r(...) --->/---> ...
                       /		                   ^                        \                           /
               .-> branches r1  ---> member r2 ---/---------> r4 ... r(10) --\----> r(14) ---> r(...)--/---> ...
              /                       ^          /                \           \         \             /
repositories ----> trunk    r1  -----/----------/--------------> r(11) ---> r(12) ---> r(15) ---> r(...) ---> ...
              \	                                                                \         \          \
               `-> tags     r1  ------------------------------------------> v1.0.0 r(13)   \          \
                       \                                                                               \
                        `--------------------------------------------------------------> v1.0.1 (r16)   \
                         `--------------------------------------------------------------------------> v1.0.2 r(n)
			]]>
		</screen>
		<para></para>
		<screen>
			<![CDATA[
                                                                            .> unstable 2.1.1
                          		                                           / \
                                              unstable 1.1           unstable 2.1     unstable 3.1
                        		                  ^ \                     ^ \         / \
               .-> branches ---> unstable 1.0 ---/   \   unstable 2.0 ---/   \   unstable 3.0    unstable---> ...
              /                      ^                \            ^          \      ^    \          ^
repositories ----> trunk    --------/-----------------> stable ---/-----> stable ---/---> stable ---/-> stable ---> ...
              \	                                       \                     \              \
               `-> tags     ----------------------------> stable 1.0          \              \
                       \                                                       \              \
                        `-------------------------------------------------------> stable 2.0   \
                         `-------------------------------------------------------------------> stable 3.0
			]]>
		</screen>
		<para>怎样访问版本库</para>
		<para>
			<graphic fileref="../images/workflow/subversion.png" />
		</para>
		<para>美工、页面人员采用WebDav访问Subversion。Photoshop,Dreamwaver
			软件对WebDav有很好地支持，他们不需要学习如何使用Subversion。
		</para>
		<para>开发者通过Svn客户端访问代码库，既可以使用开发IDE集成工具也可以使用单独工具。像TortoiseSVN等等。</para>

	</section>
	<section>
		<title>nightly version</title>
		<para>每天晚上做一个快照</para>
	</section>
	<section>
		<title>rc1,rc2,rc4</title>
	</section>
	
</section>
	

	<section>
		<title>代码审查</title>
		<para>Code Review</para>
		<para>一对一代码审查可以提高程序质量.</para>
		<screen>
		<![CDATA[

developer neo ---> coding ---> commit --->.
                           /               \
developer zen ---> review '                 \
                                           --->  svn repos
developer neo ---> review .                 /
                           \               /
developer zen ---> coding ---> commit --->`
		]]>
		</screen>
		<section id="devops.code">
			<title>Coding workflow</title>
			<para>
				<graphic format="png" fileref=".。/../images/workflow/Development Flow.png" srccredit="neo" width="" />
			</para>
		</section>
	</section>
	
	<section id="redis">
		<title>Redis Key</title>
		<para>Redis Key 使用“：”分割例如 </para>
		<screen>
set SMS:CAPTCHA 1234
		</screen>
	</section>
	<section id="code">
		<title>错误编码</title>
		<para>格式 ABCD</para>
		<para>A: 编码 </para>
		<para>1 用户错误</para>
		<para>2 网络错误</para>
		<para>3 系统错误</para>
		<para>4 应用服务器错误</para>
		<para>5 应用程序错误</para>
		<para>6 缓存错误</para>
		<para>7 数据库错误</para>
		<para>8 搜索引擎</para>
		<para>B 编码 </para>
		<para>0 成功</para>
		<para>1 失败 </para>
		<para> 剩余 C D 用户自行编码 </para>
	</section>
	&chapter.standard.html.xml;
	&chapter.standard.coding.xml;
	<section id="performance">
		<title>安全</title>
		<section>
			<title>Interface</title>
			<graphic fileref="../images/development/interface.png" />
		</section>
		<section>
			<title>SQL注入</title>
		</section>
	</section>
</section>
