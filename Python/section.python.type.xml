<?xml version="1.0" encoding="UTF-8"?>
<section id="type">
	<title>数据类型</title>
	<section id="type">
		<title>type 数据类型检测</title>
		<para>http://docs.python.org/library/types.html</para>
		<screen>
		<![CDATA[
>>> type( [] ) == list
True
>>> type( {} ) == dict
True
>>> type( "" ) == str
True
>>> type( 0 ) == int
True
>>> class Test1 ( object ):
    pass
>>> class Test2 ( Test1 ):
    pass
>>> a = Test1()
>>> b = Test2()
>>> type( a ) == Test1
True
>>> type( b ) == Test2
True
>>> type( b ) == Test1
False
>>> isinstance( b, Test1 )
True
>>> isinstance( b, Test2 )
True
>>> isinstance( a, Test1 )
True
>>> isinstance( a, Test2 )
False
>>> isinstance( [], list )
True
>>> isinstance( {}, dict )
True
		]]>
		</screen>
		<screen>
		<![CDATA[
>>> a = []
>>> type(a)
<type 'list'>
>>> f = ()
>>> type(f)
<type 'tuple'>
		]]>
		</screen>
	</section>
	<section id="string">
		<title>String</title>
		<section id="str.fun">
			<title>String function</title>
			<section id="str.find">
				<title>str.find()</title>
				<para>找到字符，返回字符串位置。没有找到返回 -1</para>
				<screen><![CDATA[
"aaa bbb ccc".find('aaa')
				]]></screen>
			</section>
			<section id="str.replace">
				<title>str.find()</title>
				<para>查找并替换字符串</para>
				<screen><![CDATA[
a = 'hello word'
a.replace('word','python')
				]]></screen>
			</section>
		</section>
		<section>
			<title>Convert str to bytes in python</title>
			<programlisting role="python">
			<![CDATA[
>>> b = str.encode(y)
>>> type(b) >>> b b’Hello World!’
To alter from bytes to str, capitalize on bytes.decode().
>>> z = b”Hello World!”
>>> y = “Hello World!”
>>> type(z)

>>> type(y)

To alter from str to bytes, capitalize on str.encode().
>>> a = bytes.decode(z)
>>> type(a)

>>> a
‘Hello World!’


# to utf-8		
'BG7NYT'.encode('utf-8')
# to utf-16
'BG7NYT'.encode('utf-16')
			]]>
			</programlisting>
		</section>
		<section>
			<title>String format</title>
			<para></para>
			<screen>
			<![CDATA[
strHello = "the length of (%s) is %d" %('Hello World',len('Hello World'))
print strHello			
			]]>
			</screen>
			<para>前导字符串加0</para>
			<screen>
			<![CDATA[
for i in range(5):
    print("%03d" % i)	

for i in range(100):
    print('{0:0>3d}'.format(i))    		
			]]>
			</screen>
		</section>
	</section>
	<section id="array">
		<title>Array</title>
		<section>
			<title>遍历数字</title>
			<programlisting>
			<![CDATA[
colours = ["RED","GREEN","BLUE"]
for colour in colours:
    print colour	
			]]>
			</programlisting>
			<para></para>
			<programlisting>
			<![CDATA[
colours = ["RED","GREEN","BLUE"]
for i in range(0, len(colours)):
    print i, colour[i]			
			]]>
			</programlisting>
		</section>
		<section>
			<title>split / join </title>
			<screen>
			<![CDATA[
>>> str = 'a|b|c|d|e'
>>> str.split("|")
['a', 'b', 'c', 'd', 'e']

>>> list = ['a', 'b', 'c', 'd', 'e']
>>> "|".join(list)
'a|b|c|d|e'
			]]>
			</screen>
		</section>
	</section>
	<section id="datetime">
		<title>Datetime</title>
		<section>
			<title>datetime</title>
			<screen>
			<![CDATA[
from datetime import datetime
datetime.today().strftime('%Y-%m-%d.%H:%M:%S')
			]]>
			</screen>
		</section>
		<section>
			<title>字符串转日期</title>
			<programlisting>
			<![CDATA[
from datetime import datetime

dt_str = '27/10/20 05:23:20'
dt_obj = datetime.strptime(dt_str, '%d/%m/%y %H:%M:%S')

print("The type of the date is now",  type(dt_obj))
print("The date is", dt_obj)			
			]]>
			</programlisting>
		</section>
		<section>
			<title>日期格式化</title>
			<screen>
			<![CDATA[
timepoint = time.strftime('%Y-%m-%d.%H:%M:%S',time.localtime(time.time()))			
			]]>
			</screen>
		</section>
	</section>
	<section id="bytes">
		<title>bytes 类型</title>


		<section>
			<title>bytes to string </title>
			<screen>
		<![CDATA[
.decode()
		]]>
			</screen>
		</section>
		<section>
			<title>BOM头</title>
			<screen><![CDATA[
BOM : fffe
BOM_BE : feff
BOM_LE : fffe
BOM_UTF8 : efbb bf
BOM_UTF16 : fffe
BOM_UTF16_BE : feff
BOM_UTF16_LE : fffe
BOM_UTF32 : fffe 0000
BOM_UTF32_BE : 0000 feff
BOM_UTF32_LE : fffe 0000
			]]></screen>
		</section>
		<section>
			<title>replace</title>
			<para>bytes类型的数据，替换方法，不要忘记b""</para>
			<programlisting>
			<![CDATA[
a = b"abc"
b = a.replace(b"a", b"f")
print(b)
			]]>
			</programlisting>
		</section>
		<section>
			<title>pack/unpack</title>
			<programlisting>
			<![CDATA[


			]]>
			</programlisting>
		</section>
	</section>
	
</section>
<section id="python.datastruct">
	<title>数据结构</title>
	<section id="data.list">
		<title>List</title>
		<para>随机抽取list成员</para>
		<screen><![CDATA[
import random

# random choice from a list
for i in range(5):
    print random.choice([1, 2, 3, 5, 9])
		]]></screen>
		<programlisting>
		<![CDATA[
test = []
test.append('1')
test.append('b')
test.append('c')
print(test)	
		]]>
		</programlisting>
	</section>
	<section id="data.set">
		<title>Set</title>

		<programlisting>
		<![CDATA[
>>> set = {'a','b','c'}
>>> set
set(['a', 'c', 'b'])

>>> set = {"one", "two", "three","one"}
>>> set
set(['three', 'two', 'one'])		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
>>> set.add('four')
>>> set
set(['four', 'three', 'two', 'one'])
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
>>> ','.join(set);
'four,three,two,one'

>>> set('four,three,two,one'.split(','));
{'one', 'four', 'three', 'two'}

>>> fruit = [ 'banana', 'orange', 'pineapple' ]
>>> set(fruit)
{'banana', 'pineapple', 'orange'}		
		]]>
		</programlisting>
	</section>
	<section id="data.dict">
		<title>Dict 字典</title>
		<section>
			<title>随机选择字典的 key 和 value</title>
			<para>随机字典的 key 和 value</para>
			<screen>
			<![CDATA[
			<![CDATA[
names = {1: '张三', 2: '李四', 3: '王五', 4: '赵六', 5: '牛七', 6: '马八'}
print(random.choice(list(names.keys())))
print(random.choice(list(names.values())))			
			]]>
			</screen>
		</section>
		<section>
			<title>字典合并</title>
			<screen>
			<![CDATA[
dict1 = {'name','neo'}
dict2 = {'nickname','netkiller'}
dict1.update(dict2)
print(dict1)			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
{'name', 'neo', 'nickname', 'netkiller'}			
			]]>
			</screen>
		</section>
	</section>

</section>

<section id="class">
	<title>Class</title>
	<screen><![CDATA[
class MyClass:
    """A simple example class"""
    i = 12345
    def f(self):
        return 'hello world'

x = MyClass()
    ]]></screen>
	<section id="class.init">
		<title>__init__ 构造方法</title>
		<screen><![CDATA[
def __init__(self):
    self.data = []
        ]]></screen>
		<screen><![CDATA[
>>> class Complex:
...     def __init__(self, realpart, imagpart):
...         self.r = realpart
...         self.i = imagpart
...
>>> x = Complex(3.0, -4.5)
>>> x.r, x.i
        ]]></screen>
	</section>
	<section>
		<title>inner class(内嵌类)</title>
		<programlisting>
		<![CDATA[

#!/usr/bin/env python3
 
import os, sys
 
class parent:
	def __init__(self):
		self.name = 'parent'
 
	def getName(self):
		print(self.name)

	class child:
		def __init__(self):
			self.name = 'child'
 
		def getName(self):
			print(self.name)
		def getParentName(self):
			print(parent.name)
 
if __name__ == '__main__':
	child =  parent.child()
	child.getName()

	p = parent()
	p.getName()
	c =  p.child()
	c.getName()
	c.getParentName()		
		]]>
		</programlisting>
		<section>
			<title>内嵌 Class 继承</title>
			<programlisting>
			<![CDATA[
class Geometry:
    class Curve:
        def __init__(self,c=1):
            self.c = c                          #curvature parameter
            print ('Curvature %g'%self.c)
            pass                                #some codes

    class Line(Curve):
        def __init__(self):
            Geometry.Curve.__init__(self,0)     #the key point
            pass                                #some codes

g = Geometry()
C = g.Curve(0.5)
L = g.Line()			
			]]>
			</programlisting>
		</section>
	</section>
</section>