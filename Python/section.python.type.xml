<?xml version="1.0" encoding="UTF-8"?>
<section id="type">
	<title>数据类型</title>
	<section id="type">
		<title>type 数据类型检测</title>
		<para>http://docs.python.org/library/types.html</para>
		<screen>
		<![CDATA[
>>> type( [] ) == list
True
>>> type( {} ) == dict
True
>>> type( "" ) == str
True
>>> type( 0 ) == int
True
>>> class Test1 ( object ):
    pass
>>> class Test2 ( Test1 ):
    pass
>>> a = Test1()
>>> b = Test2()
>>> type( a ) == Test1
True
>>> type( b ) == Test2
True
>>> type( b ) == Test1
False
>>> isinstance( b, Test1 )
True
>>> isinstance( b, Test2 )
True
>>> isinstance( a, Test1 )
True
>>> isinstance( a, Test2 )
False
>>> isinstance( [], list )
True
>>> isinstance( {}, dict )
True
		]]>
		</screen>
		<screen>
		<![CDATA[
>>> a = []
>>> type(a)
<type 'list'>
>>> f = ()
>>> type(f)
<type 'tuple'>
		]]>
		</screen>
	</section>
	<section id="string">
		<title>字符串</title>
		<section id="str.fun">
			<title>String function</title>
			<section id="str.find">
				<title>str.find()</title>
				<para>找到字符，返回字符串位置。没有找到返回 -1</para>
				<screen><![CDATA[
"aaa bbb ccc".find('aaa')
				]]></screen>
			</section>
			<section id="str.replace">
				<title>str.find()</title>
				<para>查找并替换字符串</para>
				<screen><![CDATA[
a = 'hello word'
a.replace('word','python')
				]]></screen>
			</section>
			<section>
				<title>format 方法</title>
				<programlisting>
			<![CDATA[
DB_URL = 'mysql+pymysql://{}:{}@{}:{}/{}?charset=utf8'.format(
    USERNAME, PASSWORD, HOST_NAME, PORT, DB_NAME
)			
			]]>
				</programlisting>
				<section>
					<title>格式化字典输出</title>
					<screen>
				<![CDATA[
member = {'name':'neo','age':18}
'my name is {name},age is {age}'.format(**member)        #**dict				
				]]>
					</screen>
					<para>输出</para>
					<screen>
				<![CDATA[
>>> member = {'name':'neo','age':18}
>>> 'my name is {name},age is {age}'.format(**member) 
'my name is neo,age is 18'				
				]]>
					</screen>
				</section>
			</section>
			<section>
				<title>Convert str to bytes in python</title>
				<programlisting role="python">
			<![CDATA[
>>> b = str.encode(y)
>>> type(b) >>> b b’Hello World!’
To alter from bytes to str, capitalize on bytes.decode().
>>> z = b”Hello World!”
>>> y = “Hello World!”
>>> type(z)

>>> type(y)

To alter from str to bytes, capitalize on str.encode().
>>> a = bytes.decode(z)
>>> type(a)

>>> a
‘Hello World!’


# to utf-8		
'BG7NYT'.encode('utf-8')
# to utf-16
'BG7NYT'.encode('utf-16')
			]]>
				</programlisting>
			</section>
		</section>

		<section>
			<title>% 字符串格式化输出</title>
			<para></para>
			<screen>
			<![CDATA[
strHello = "the length of (%s) is %d" %('Hello World',len('Hello World'))
print strHello			
			]]>
			</screen>
			<para>前导字符串加0</para>
			<screen>
			<![CDATA[
for i in range(5):
    print("%03d" % i)	

for i in range(100):
    print('{0:0>3d}'.format(i))    		
			]]>
			</screen>

		</section>

		<section id="f-string">
			<title>f-string 格式化字符串</title>
			<programlisting>
			<![CDATA[
text = "Hello"
print(f"{text:-^15}")

number = 1
print(f"{number:0<5}")
print(f"{number:0>5}")			
			]]>
			</programlisting>
			<screen>
			<![CDATA[
-----Hello-----
10000
00001			
			]]>
			</screen>
			<para>打印99乘法表</para>
			<programlisting>
			<![CDATA[
for i in range(1,10):
    for j in range(1,i+1):
        print(f"{j}*{i}={j*i}",end=" ")
    print("")			
			]]>
			</programlisting>
			<screen>
			<![CDATA[
1*1=1 
1*2=2 2*2=4 
1*3=3 2*3=6 3*3=9 
1*4=4 2*4=8 3*4=12 4*4=16 
1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 
1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 
1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 
1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 
1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 			
			]]>
			</screen>
			<para>格式化日期</para>
			<programlisting>
			<![CDATA[
>>> from datetime import *
>>> a = date.today()
>>> a
datetime.date(2023, 9, 2)
>>> f"{a:%Y-%m-%d}"
'2023-09-02'			
			]]>
			</programlisting>
		</section>
		<section>
			<title>去除中文</title>
			<programlisting>
			<![CDATA[
import re
prompt='给我画一张 An octopus catches crabs in the sea 3D'
string=re.sub('[\u4e00-\u9fa5]', '', prompt)
print(string)			
			]]>
			</programlisting>
		</section>
		<section>
			<title>去除标点符号</title>
			<programlisting>
			<![CDATA[
simple_punctuation = '[’!"#$%&\'()*+,-/:;<=>?@[\\]^_`{|}~，。,]'
line = re.sub(simple_punctuation, '', string)			
			]]>
			</programlisting>
		</section>
		<section>
			<title>去除数字</title>
			<programlisting>
			<![CDATA[
re.sub("[0-9]", " ", line)			
			]]>
			</programlisting>
		</section>
		<section>
			<title>uuid</title>
			<programlisting>
			<![CDATA[
import uuid

# 生成一个基于时间和主机地址的UUID
uuid1 = uuid.uuid1()

# 生成一个基于命名空间和名字的MD5散列的UUID
uuid3 = uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')

# 生成一个随机UUID
uuid4 = uuid.uuid4()

# 生成一个基于命名空间和名字的SHA-1散列的UUID
uuid5 = uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')

# 打印UUID的字符串表示形式
print(str(uuid1))
print(str(uuid3))
print(str(uuid4))
print(str(uuid5))			
			]]>
			</programlisting>
		</section>
		<section>
			<title>字符串 \n 换行符转 list</title>
			<programlisting>
			<![CDATA[
text = "Hello\nWorld\n"
lines = text.splitlines()
print(lines)  # 输出：['Hello', 'World']			
			]]>
			</programlisting>
		</section>
		<section>
			<title>字符串清洗，去除换行符</title>
			<programlisting>
			<![CDATA[
text = "\nHello, World!\n"
new_text = text.strip("\n")
print(new_text)  # 输出：Hello, World!

text = "Hello, World!\n"
new_text = text.rstrip("\n")
print(new_text)  # 输出：Hello, World!
			
			]]>
			</programlisting>
		</section>
		<section>
			<title>表情符号 emoji</title>
			<screen>
		<![CDATA[
import emoji
result = emoji.emojize('Python is :thumbs_up:')
print(result)
# 'Python is  &#x27;
<br/># You can also reverse this:
result = emoji.demojize('Python is  ')
print(result)<br/># 'Python is :thumbs_up:&#x27;		
		]]>
			</screen>
		</section>
	</section>
	<section id="float">
		<title>float 浮点数值</title>
		<programlisting>
		<![CDATA[
for i in [12.12300, 12.00, 200.12000, 200.0]:
    print('{:g}'.format(i))		
		]]>
		</programlisting>
		<section>
			<title>保留小数位数</title>
			<programlisting>
			<![CDATA[
f = 3.1415926

print('%.2f'%f)
print('%.3f'%f)
print('%.4f'%f)		

print('{:.2f}'.format(f))
print('{:.3f}'.format(f))
print('{:.4f}'.format(f))
			]]>
			</programlisting>
		</section>
		<section>
			<title>四舍五入</title>
			<programlisting>
			<![CDATA[
f = 3.1415926

print(round(f,1))
print(round(f,2))
print(round(f,3))
print(round(f,4))		
			]]>
			</programlisting>
		</section>
	</section>
	<section id="array">
		<title>Array</title>
		<section>
			<title>遍历数字</title>
			<programlisting>
			<![CDATA[
colours = ["RED","GREEN","BLUE"]
for colour in colours:
    print colour	
			]]>
			</programlisting>
			<para></para>
			<programlisting>
			<![CDATA[
colours = ["RED","GREEN","BLUE"]
for i in range(0, len(colours)):
    print i, colour[i]			
			]]>
			</programlisting>
		</section>
		<section>
			<title>split / join </title>
			<screen>
			<![CDATA[
>>> str = 'a|b|c|d|e'
>>> str.split("|")
['a', 'b', 'c', 'd', 'e']

>>> list = ['a', 'b', 'c', 'd', 'e']
>>> "|".join(list)
'a|b|c|d|e'
			]]>
			</screen>
		</section>
	</section>
	<section id="datetime">
		<title>日期和时间</title>
		<section>
			<title>当前时间</title>
			<para>当前日期</para>
			<screen>
			<![CDATA[
import time	
dt = time.strftime('%Y-%m-%d.%X',time.localtime(time.time()))
print(dt)	
			]]>
			</screen>
			<screen>
			<![CDATA[
>>> import time 
>>> dt = time.strftime('%Y-%m-%d.%X',time.localtime(time.time()))
>>> print(dt)
2014-01-23.11:07:28	
			]]>
			</screen>
			<programlisting>
			<![CDATA[
from datetime import datetime

print(datetime.today())
print(datetime.now())
print(datetime.now().date())
print(datetime.now().time())
			]]>
			</programlisting>
			<screen>
			<![CDATA[
2023-03-11 18:30:34.657155
2023-03-11 18:30:34.657176
2023-03-11
18:30:34.657182			
			]]>
			</screen>
			<screen>
			<![CDATA[
today = datetime.today()
yesterday = (today - timedelta(days=1)).date()			
			]]>
			</screen>
		</section>
		<section>
			<title>生成时间</title>
			<programlisting>
			<![CDATA[
from datetime import date
print(date(2002, 12, 31))			
			]]>
			</programlisting>
		</section>
		<section>
			<title>日期格式化</title>
			<screen>
			<![CDATA[
from datetime import datetime
datetime.today().strftime('%Y-%m-%d.%H:%M:%S')

timepoint = time.strftime('%Y-%m-%d.%H:%M:%S',time.localtime(time.time()))
			]]>
			</screen>
		</section>
		<section>
			<title>字符串转日期</title>
			<programlisting>
			<![CDATA[
from datetime import datetime

dt_str = '27/10/20 05:23:20'
dt_obj = datetime.strptime(dt_str, '%d/%m/%y %H:%M:%S')

print("The type of the date is now",  type(dt_obj))
print("The date is", dt_obj)			
			]]>
			</programlisting>
		</section>
		<section>
			<title>日期转字符串</title>
			<programlisting>
			<![CDATA[
from datetime import date
print(date(2002, 12, 31).strftime('%Y-%m-%d'))			
			]]>
			</programlisting>
		</section>

		<section>
			<title>日期运算</title>
			<section>
				<title>天数差</title>
				<programlisting>
				<![CDATA[
from datetime import datetime

begin='2023-02-01'
end='2023-02-28'

interval=datetime.strptime(end,'%Y-%m-%d').date() - datetime.strptime(begin,'%Y-%m-%d').date()
print(interval.days)
				]]>
				</programlisting>
			</section>
			<section>
				<title>月/周 首尾计算</title>
				<programlisting>
			<![CDATA[
from datetime import timedelta,datetime

now = datetime.now()

# 获取昨天日期：
yesterday = now - timedelta(days=1)
# 获取明天日期：
tomorrow = now + timedelta(days=1)			
			]]>
				</programlisting>
				<programlisting>
			<![CDATA[
# 获取本周第一天和最后一天：
this_week_start = now - timedelta(days=now.weekday())
this_week_end = now + timedelta(days=6-now.weekday())

# 获取上周第一天和最后一天：
last_week_start = now - timedelta(days=now.weekday()+7)
last_week_end = now - timedelta(days=now.weekday()+1)

# 获取上月第一天和最后一天:

last_month_end = this_month_start - timedelta(days=1) 
last_month_start = datetime.datetime(last_month_end.year, last_month_end.month, 1)

# 获取本季第一天和最后一天：

month = (now.month - 1) - (now.month - 1) % 3 + 1
this_quarter_start = datetime.datetime(now.year, month, 1)
this_quarter_end = datetime.datetime(now.year, month, calendar.monthrange(now.year, now.month)[1]) 

# 获取上季第一天和最后一天：

last_quarter_end = this_quarter_start - timedelta(days=1)
last_quarter_start = datetime.datetime(last_quarter_end.year, last_quarter_end.month - 2, 1)

# 获取本年第一天和最后一天：

this_year_start = datetime.datetime(now.year, 1, 1)
this_year_end = datetime.datetime(now.year + 1, 1, 1) - timedelta(days=1)

# 获取去年第一天和最后一天：

last_year_end = this_year_start - timedelta(days=1)
last_year_start = datetime.datetime(last_year_end.year, 1, 1) 
			]]>
				</programlisting>
			</section>
		</section>
		<section>
			<title>日期范围计算</title>
			<para>计算两个日期之间的月份</para>
			<programlisting>
			<![CDATA[
import calendar
import datetime

begin = "2017-11-15"
end = "2018-04-23"


def monthlist(begin, end):
    begin = datetime.datetime.strptime(begin, "%Y-%m-%d")
    end = datetime.datetime.strptime(end, "%Y-%m-%d")

    result = []
    while True:
        if begin.month == 12:
            next = begin.replace(year=begin.year+1, month=1, day=1)
        else:
            next = begin.replace(month=begin.month+1, day=1)
        if next > end:
            break

        day = calendar.monthrange(begin.year, begin.month)[1]

        result.append((begin.strftime("%Y-%m-%d"),
                      begin.replace(day=day).strftime("%Y-%m-%d")))
        begin = next
    result.append((begin.strftime("%Y-%m-%d"), end.strftime("%Y-%m-%d")))
    return result


lists = monthlist(begin, end)
print(lists)
for (b, e) in lists:
    print(b, e)
			
			]]>
			</programlisting>
		</section>
		<section>
			<title>日期排序</title>
			<programlisting>
			<![CDATA[
import datetime
 
list_time=["2018-05-01","2018-02-01","2018-07-10","2019-06-01"]
 
list_time1=sorted(list_time,key=lambda date:datetime.datetime.strptime(date,"%Y-%m-%d").timestamp())
 
print('before', list_time)
print('after', list_time1)

print('before', list_time)
print('min', min(list_time1), 'max', max(list_time1))			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="bytes">
		<title>bytes 类型</title>
		<section>
			<title>bytes to string </title>
			<screen>
			<![CDATA[
.decode()
			]]>
			</screen>
		</section>
		<section>
			<title>BOM头</title>
			<screen><![CDATA[
BOM : fffe
BOM_BE : feff
BOM_LE : fffe
BOM_UTF8 : efbb bf
BOM_UTF16 : fffe
BOM_UTF16_BE : feff
BOM_UTF16_LE : fffe
BOM_UTF32 : fffe 0000
BOM_UTF32_BE : 0000 feff
BOM_UTF32_LE : fffe 0000
			]]></screen>
		</section>
		<section>
			<title>replace</title>
			<para>bytes类型的数据，替换方法，不要忘记b""</para>
			<programlisting>
			<![CDATA[
a = b"abc"
b = a.replace(b"a", b"f")
print(b)
			]]>
			</programlisting>
		</section>
		<section>
			<title>pack/unpack</title>
			<programlisting>
			<![CDATA[


			]]>
			</programlisting>
		</section>
	</section>
	<section>
		<title>百分数</title>
		<section>
			<title>float 转 百分数</title>
			<programlisting>
			<![CDATA[
a = 0.50
b = "%.f%%" % (a * 100)
print(b) # 50%
			]]>
			</programlisting>
		</section>
		<section>
			<title>float 转 int 转 str 百分数</title>
			<programlisting>
			<![CDATA[
a = 0.5
b = str(int(a * 100)) + '%\n'
print(b) # 50%			
			]]>
			</programlisting>
		</section>
		<section>
			<title>str.format() 处理百分数</title>
			<programlisting>
			<![CDATA[
num = 0.123
print("结果为：{:.2f}%".format(num * 100))			
			]]>
			</programlisting>
		</section>
		<section>
			<title>f-string 处理百分数</title>
			<programlisting>
			<![CDATA[
num = 0.123
print(f"结果为：{num * 100:.2f}%")			
			]]>
			</programlisting>
		</section>
		
	</section>

</section>
<section id="python.datastruct">
	<title>数据结构</title>
	<section id="data.list">
		<title>List</title>
		<para>随机抽取list成员</para>
		<screen><![CDATA[
import random

# random choice from a list
for i in range(5):
    print random.choice([1, 2, 3, 5, 9])
		]]></screen>
		<programlisting>
		<![CDATA[
test = []
test.append('1')
test.append('b')
test.append('c')
print(test)	
		]]>
		</programlisting>
		<section>
			<title>返回索引序号</title>
			<para>index()方法语法：</para>
			<screen>
			<![CDATA[
list.index(x[, start[, end]])

参数
x-- 查找的对象。
start-- 可选，查找的起始位置。
end-- 可选，查找的结束位置。			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
fruits = ["apple", "banana", "cherry", "apple"]
print(fruits.index("apple")) # 输出: 0

animals = ["cat", "dog", "tiger"]
print(animals.index("dog")) # 输出: 1

numbers = [1, 2, 3, 4, 1, 1, 1, 4, 5]
print(numbers.index(4, 4, 8)) # 输出: 7
			]]>
			</programlisting>
		</section>
		<section>
			<title>二维列表，指定列，查找最大值</title>
			<programlisting>
			<![CDATA[
matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

column = [row[1] for row in matrix]
max_value = max(column)

print("第二列最大值：", max_value)			
			]]>
			</programlisting>
			<para>返回最大值</para>
			<programlisting>
			<![CDATA[
matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

column = [row[1] for row in matrix]
max_value = max(column)
index = column.index(max_value)
print(index, matrix[index])			
			]]>
			</programlisting>
		</section>
		<section>
			<title>获得list中最大/最小值元素的索引</title>
			<programlisting>
			<![CDATA[
获得list中最大元素的索引

nums = [1,2,3,4,5]

nums.index(max(nums))

相应的最小值索引

nums = [1,2,3,4,5]

nums.index(min(nums))			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="data.set">
		<title>Set</title>

		<programlisting>
		<![CDATA[
>>> set = {'a','b','c'}
>>> set
set(['a', 'c', 'b'])

>>> set = {"one", "two", "three","one"}
>>> set
set(['three', 'two', 'one'])		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
>>> set.add('four')
>>> set
set(['four', 'three', 'two', 'one'])
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
>>> ','.join(set);
'four,three,two,one'

>>> set('four,three,two,one'.split(','));
{'one', 'four', 'three', 'two'}

>>> fruit = [ 'banana', 'orange', 'pineapple' ]
>>> set(fruit)
{'banana', 'pineapple', 'orange'}		
		]]>
		</programlisting>
	</section>
	<section id="data.dict">
		<title>Dict 字典</title>
		<section>
			<title>随机选择字典的 key 和 value</title>
			<para>随机字典的 key 和 value</para>
			<screen>
			<![CDATA[
			<![CDATA[
names = {1: '张三', 2: '李四', 3: '王五', 4: '赵六', 5: '牛七', 6: '马八'}
print(random.choice(list(names.keys())))
print(random.choice(list(names.values())))			
			]]>
			</screen>
		</section>
		<section>
			<title>字典合并</title>
			<screen>
			<![CDATA[
dict1 = {'name','neo'}
dict2 = {'nickname','netkiller'}
dict1.update(dict2)
print(dict1)			
			]]>
			</screen>
			<para></para>
			<screen>
			<![CDATA[
{'name', 'neo', 'nickname', 'netkiller'}			
			]]>
			</screen>
		</section>
		<section>
			<title>取最大值</title>
			<programlisting>
			<![CDATA[

data = [
    {
      "question": "为什么过只加汇摇晃",
      "answer": "因为支架是由很多支索小圆轮组成的，所以吊厢过索轮时会有轻微的震动和摇晃，这些都是正常的",
      "ratio": 0,
      "distance": 41.112388610839844
    },
    {
      "question": "吊厢过之家为什么会摇晃",
      "answer": "因为支架是由很多支索小圆轮组成的，所以吊厢过索轮时会有轻微的震动和摇晃，这些都是正常的",
      "ratio": 0,
      "distance": 42.78510284423828
    },
    {
      "question": "嗦道为啥会摇晃",
      "answer": "因为支架是由很多支索小圆轮组成的，所以吊厢过索轮时会有轻微的震动和摇晃，这些都是正常的",
      "ratio": 1,
      "distance": 44.00849914550781
    }
   
  ]

ret = max(data, key=lambda dic: dic['ratio']) 
print(ret)  
			
			]]>
			</programlisting>
		</section>
		<section>
			<title>字典求和</title>
			<programlisting>
			<![CDATA[
count = sum(dict.values())			
			]]>
			</programlisting>
		</section>
	</section>
	<section>
		<title>序列化</title>
		<programlisting>
		<![CDATA[ 
import shelve

with shelve.open("/var/tmp/test") as db:
	db["hello"] = "helloworld"

with shelve.open("/var/tmp/test") as db:
	for k, v in db.items():
		print(k, ":", v)		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[ 
import shelve, json

data = json.loads(json.dumps({"800": "AAAA", "900": "BBBB", "1000": "CCCC"}))
print(data, type(data))
with shelve.open("/var/tmp/test", "n") as db:
	for k, v in data.items():
		db[k] = v

with shelve.open("/var/tmp/test") as db:
	for k, v in db.items():
		print(k, ":", v)
		]]>
		</programlisting>
	</section>
	<section>
		<title>队列</title>
		<programlisting>
		<![CDATA[ 
import queue

q = queue.SimpleQueue()

for n in range(10):
	q.put(n)

print("队列数量:", q.qsize())

while not q.empty():
	print(q.get())

print("队列状态：", q.empty())
			]]>
		</programlisting>
		<para>先进先出队列，保持队列最大尺寸，超过尺寸自动出队</para>
		<programlisting>
		<![CDATA[ 
from queue import Queue

q = Queue(maxsize=3)

for i in range(10):
	if q.full():
		q.get()
	q.put(i, block=False)


print(type(q.queue), q.queue)

while not q.empty():
	i = q.get(block=False)
	print(i)		
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[ 
from queue import Queue

q = Queue(maxsize=10)

for i in range(20):
	if q.full():
		q.get()
	q.put(i, block=False)


print(type(q.queue), q.queue)

for n in range(5):
	if not q.empty():
		i = q.get(block=False)
		print(i)		
		]]>
		</programlisting>
	</section>
</section>

<section id="class">
	<title>Class</title>
	<screen><![CDATA[
class MyClass:
    """A simple example class"""
    i = 12345
    def f(self):
        return 'hello world'

x = MyClass()
    ]]></screen>
	<section id="class.init">
		<title>__init__ 构造方法</title>
		<screen><![CDATA[
def __init__(self):
    self.data = []
        ]]></screen>
		<screen><![CDATA[
>>> class Complex:
...     def __init__(self, realpart, imagpart):
...         self.r = realpart
...         self.i = imagpart
...
>>> x = Complex(3.0, -4.5)
>>> x.r, x.i
        ]]></screen>
	</section>
	<section>
		<title>print class</title>
		<para>测试代码，当我们使用 print 打印一个 class</para>
		<programlisting>
		<![CDATA[
class Test:
    def __init__(self, a, b):
        self.a = a
        self.b = b

t = Test(1234, 5678)
print(t)
		]]>
		</programlisting>
		<para>输出</para>
		<screen>
		<![CDATA[
<__main__.Test object at 0x000002BA71D254F0>		
		]]>
		</screen>
		<para>print 会调用 __str__() 和 __repr__() 方法，我们只需定义他们即可</para>
		<programlisting>
		<![CDATA[
class Test:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __repr__(self):
        return "Test a:% s b:% s" % (self.a, self.b)

    def __str__(self):
        return "Test: a is % s, " \
               "b is % s" % (self.a, self.b)

    # Driver Code


t = Test(1234, 5678)

# This calls __str__()  
print(t)

# This calls __repr__()  
print([t]) 		
		]]>
		</programlisting>
	</section>
	<section>
		<title>inner class(内嵌类)</title>
		<programlisting>
		<![CDATA[

#!/usr/bin/env python3
 
import os, sys
 
class parent:
	def __init__(self):
		self.name = 'parent'
 
	def getName(self):
		print(self.name)

	class child:
		def __init__(self):
			self.name = 'child'
 
		def getName(self):
			print(self.name)
		def getParentName(self):
			print(parent.name)
 
if __name__ == '__main__':
	child =  parent.child()
	child.getName()

	p = parent()
	p.getName()
	c =  p.child()
	c.getName()
	c.getParentName()		
		]]>
		</programlisting>
		<section>
			<title>内嵌 Class 继承</title>
			<programlisting>
			<![CDATA[
class Geometry:
    class Curve:
        def __init__(self,c=1):
            self.c = c                          #curvature parameter
            print ('Curvature %g'%self.c)
            pass                                #some codes

    class Line(Curve):
        def __init__(self):
            Geometry.Curve.__init__(self,0)     #the key point
            pass                                #some codes

g = Geometry()
C = g.Curve(0.5)
L = g.Line()			
			]]>
			</programlisting>
		</section>
	</section>
	<section>
		<title>Python 枚举 Enum</title>
		<programlisting>
		<![CDATA[
from enum import Enum
class Weekday(Enum):
    MONDAY = 1
    TUESDAY = 2
    WEDNESDAY = 3
    THURSDAY = 4
    FRIDAY = 5
    SATURDAY = 6
    SUNDAY = 7
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
from enum import auto
class Weekday(Flag):
    MONDAY = auto()
    TUESDAY = auto()
    WEDNESDAY = auto()
    THURSDAY = auto()
    FRIDAY = auto()
    SATURDAY = auto()
    SUNDAY = auto()
    WEEKEND = SATURDAY | SUNDAY
		]]>
		</programlisting>
		<section>
			<title>name 和 value</title>
			<programlisting>
			<![CDATA[
from enum import Enum
class Weekday(Enum):
    monday = 1
    tuesday = 2
    wednesday = 3
    thirsday = 4
    friday = 5
    saturday = 6
    sunday = 7
 
print(Weekday.wednesday)         # Weekday.wednesday      
print(type(Weekday.wednesday))   # <enum 'Weekday'>
print(Weekday.wednesday.name)    # wednesday
print(Weekday.wednesday.value)   # 3
			
			]]>
			</programlisting>
		</section>
		<section>
			<title>增加属性</title>
			<programlisting>
			<![CDATA[
from enum import Enum
class Weekday(Enum):
    monday = 1
    tuesday = 2
    wednesday = 3
    thirsday = 4
    friday = 5
    saturday = 6
    sunday = 7
 
Weekday.wednesday.label = "定时"
Weekday.wednesday.time = 10
 
print(Weekday.wednesday.label)   # 定时
print(Weekday.wednesday.time)    # 10
			
			]]>
			</programlisting>
		</section>
		<section>
			<title>唯一约束</title>
			<para>正常情况,枚举允许重复出现相同的值</para>
			<programlisting>
			<![CDATA[
from enum import Enum
class Weekday(Enum):
    monday = 1
    tuesday = 2
    wednesday = 3
    thirsday = 4
    friday = 5
    saturday = 6
    sunday = 7
    test = 3
 
 
print(Weekday.test.value)    # 3
			]]>
			</programlisting>
			<para>如果不希望出现重复,可以使用 @unique 注解</para>
			<programlisting>
			<![CDATA[
from enum import Enum, unique

@unique
class Weekday(Enum):
    monday = 1
    tuesday = 2
    wednesday = 3
    thirsday = 4
    friday = 5
    saturday = 6
    sunday = 7
    test = 3

try:
    print(Weekday.test.value)
except Exception as e:
    print(e)
			]]>
			</programlisting>
			<para>运行会抛出异常</para>
			<screen>
			<![CDATA[
ValueError: duplicate values found in <enum 'Weekday'>: test -> wednesday			
			]]>
			</screen>
		</section>
		<section>
			<title>枚举比较</title>
			<programlisting>
			<![CDATA[
from enum import Enum
class Weekday(Enum):
    monday = 1
    tuesday = 2
    wednesday = 3
    thirsday = 4
    friday = 5
    saturday = 6
    sunday = 7
 
obj1 = Weekday.wednesday
 
obj2 = Weekday['wednesday']
 
obj3 = Weekday(3)
 
print(obj1==obj2==obj3)      # True
 
print(obj1 is obj2 is obj3)  # True
			
			]]>
			</programlisting>
		</section>

	</section>
</section>
<section id="python.regular">
	<title>正则处理字符串</title>
	<section>
		<title>正则替换</title>
		<screen>
				<![CDATA[ 
import re

string = "TMP AAAAAA\r\nMSG BBBB"

print(re.sub(r'(TMP|MSG)\s', "", string))

				]]>
		</screen>
	</section>
	<section>
		<title>match</title>
		<programlisting>
				<![CDATA[ 
#!/usr/bin/python
import re

string = "/aaa/bbb/ccc"
match = re.match(r"/aaa/bbb/(.*)", string)
print(match)
print(match.span())
print(match.string)
print(match.group())
print(match.group(1))
print(match.groups())
print(match.groupdict())				
				]]>
		</programlisting>
		<para>输出</para>
		<screen>
				<![CDATA[ 
<re.Match object; span=(0, 12), match='/aaa/bbb/ccc'>
(0, 12)
/aaa/bbb/ccc
/aaa/bbb/ccc
ccc
('ccc',)
{}				
				]]>
		</screen>
	</section>
	<section>
		<title>正则查找</title>
		<programlisting>
				<![CDATA[
#!/usr/bin/python
import re

regular = "打开|关闭|结束|暂停"
question = "打开电灯，然后关闭"
pattern = re.compile(regular)
result = pattern.findall(question)
print(result)
				]]>
		</programlisting>
		<programlisting>
				<![CDATA[
#!/usr/bin/python
import re

regular = "(打开|播放)圣经第(.+)卷第(.*)章"
question = "打开圣经第三卷第二章"
pattern = re.compile(regular)
result = pattern.findall(question)
print(result)				
				]]>
		</programlisting>
	</section>
	<section>
		<title>正则匹配后返回字典</title>
		<programlisting>
		<![CDATA[
#!/usr/bin/python
import re

m = re.match(r"(?P<firstname>\w+) (?P<lastname>\w+)", "Neo Chen")
print(m.group("firstname"), m.group("lastname"))		
		]]>
		</programlisting>
		<para></para>
		<programlisting>
		<![CDATA[
>>> match = re.search(r'(foo)?(bar)?', 'foo')
>>> match and match.groups()[1]
None
>>> match = re.search(r'(foo)?(bar)?', 'foobar')
>>> match and match.groups()[1]
'bar'

match = re.search(r'(?P<foo>foo)?(?P<bar>bar)?', 'foo')
match and match.groupdict().get('bar')

match = re.search(r'(?P<foo>foo)?(?P<bar>bar)?', 'foobar')
match and match.groupdict().get('bar')

		
		]]>
		</programlisting>
	</section>
</section>