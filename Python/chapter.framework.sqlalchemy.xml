<chapter id="index"><?dbhtml dir="sqlalchemy" ?>
	<title>Sqlalchemy</title>
	<section>
		<title>安装 Sqlalchemy</title>
		<screen>
		<![CDATA[
pip install pymysql
pip install sqlalchemy		
		]]>
		</screen>
	</section>
	<section>
		<title>链接测试</title>
		<programlisting>
		<![CDATA[
from sqlalchemy import create_engine

HOST_NAME = '127.0.0.1'	# 主机
PORT = '3306'	# 端口号
DB_NAME = '数据库名称，需提前创建好'
USERNAME = '用户名'
PASSWORD = '密码'

DB_URL = 'mysql+pymysql://{}:{}@{}:{}/{}?charset=utf8'.format(
    USERNAME, PASSWORD, HOST_NAME, PORT, DB_NAME
)
engine = create_engine(DB_URL)

if __name__ == '__main__':
    connection = engine.connect()
    result = connection.execute('select 1')
    print(result.fetchone())
		]]>
		</programlisting>
		<para>打印 SQL 语句</para>
		<programlisting>
		<![CDATA[
SQLAlchemy 通过 echo=true，将连接这个数据库引擎的所有执行语句打印出来：

engine = create_engine("<db_rul>", echo=True)		
		]]>
		</programlisting>
	</section>
	<section>
		<title>创建表</title>
		<programlisting>
		<![CDATA[
models.Base.metadata.create_all(bind=engine)		
		]]>
		</programlisting>
	</section>
	<section>
		<title>Session</title>
		<programlisting>
		<![CDATA[
# 创建数据库会话
Session = sessionmaker(autocommit=False, autoflush=False, bind=engine)		
		]]>
		</programlisting>
	</section>
	<section id="sqlalchemy.models">
		<title>模型定义</title>
		<para>导入数据类型</para>
		<programlisting>
		<![CDATA[
from sqlalchemy import Column, Integer, String, Float, DECIMAL, Boolean, Enum, Date, DateTime, Time
from sqlalchemy.dialects.mysql import LONGTEXT		
		]]>
		</programlisting>
		<section>
			<title>定义字段</title>
			<para>主键</para>
			<programlisting>
				<![CDATA[
id = Column(Integer, primary_key=True, autoincrement=True)				
				]]>
			</programlisting>
			<programlisting>
			<![CDATA[
price = Column(Float)
# 总共有 20 位,  保留 5 位小说
price = Column(DECIMAL(20, 5))
is_delete = Column(Boolean)
create_time = Column(DateTime)
content = Column(LONGTEXT)
			]]>
			</programlisting>
			<para>指定字段名</para>
			<programlisting>
				<![CDATA[
name = Column('fullname', String(60))				
				]]>
			</programlisting>
			<para>枚举字段</para>
			<programlisting>
				<![CDATA[
gender = Column(Enum('男', '女'))				
				]]>
			</programlisting>
			<para>默认值</para>
			<programlisting>
				<![CDATA[
name = Column(String(20), default=None, nullable=False, comment="姓名")
				]]>
			</programlisting>
			<section>
				<title>server_default</title>
				<para>default 默认是是 sqlalchemy 产生的，我们需要让数据库完成默认值的填充，就需要使用
					server_default</para>
				<programlisting>
				<![CDATA[
class PictureBookHasPicture(Base):
    __tablename__ = "picture_book_has_picture"
    id = Column(BIGINT, autoincrement=True, primary_key=True, comment="主键")
    picture_book_id = Column(
        Integer,
        ForeignKey("picture_book.id", ondelete="CASCADE", onupdate="CASCADE"),
        nullable=False,
        comment="绘本ID",
    )
    picture_id = Column(
        BIGINT, ForeignKey("picture.id"), nullable=False, comment="图片ID"
    )
    ctime = Column(DateTime, server_default=text("now()"), comment="创建时间")
				]]>
				</programlisting>
				<para>ON UPDATE</para>
				<programlisting>
				<![CDATA[
class PictureBookHasPicture(Base):
    __tablename__ = "picture_book_has_picture"
    id = Column(BIGINT, autoincrement=True, primary_key=True, comment="主键")
    picture_book_id = Column(
        Integer,
        ForeignKey("picture_book.id", ondelete="CASCADE", onupdate="CASCADE"),
        nullable=False,
        comment="绘本ID",
    )
    picture_id = Column(
        BIGINT, ForeignKey("picture.id"), nullable=False, comment="图片ID"
    )
    ctime = Column(DateTime, server_default=text("now()"), comment="创建时间")
    mtime = Column(
        DateTime,
        server_default=text("NULL ON UPDATE CURRENT_TIMESTAMP"),
        comment="更新时间",
    )				
				]]>
				</programlisting>
				<para>输出结果</para>
				<programlisting>
				<![CDATA[
CREATE TABLE `picture_book_has_picture` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `picture_book_id` int NOT NULL COMMENT '绘本ID',
  `picture_id` bigint NOT NULL COMMENT '图片ID',
  `ctime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `mtime` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `picture_book_id` (`picture_book_id`),
  KEY `picture_id` (`picture_id`),
  CONSTRAINT `picture_book_has_picture_ibfk_1` FOREIGN KEY (`picture_book_id`) REFERENCES `picture_book` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `picture_book_has_picture_ibfk_2` FOREIGN KEY (`picture_id`) REFERENCES `picture` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci				
				]]>
				</programlisting>
			</section>
			<section>
				<title>给表加注释</title>
				<para>给表增加注释 __table_args__ = {"comment": "安卓设备表"}</para>
				<programlisting>
				<![CDATA[
class Android(Base):
    __tablename__ = "android"
    __table_args__ = {"comment": "安卓设备表"}
    android_id = Column(String(16), primary_key=True, comment="安卓设备ID")
    sn = Column(String(18), nullable=False, unique=True, comment="序列号")
    version = Column(String(16), nullable=False, unique=False, comment="软件版本")
    model = Column(String(16), nullable=False, unique=False, comment="产品型号")
    mac = Column(String(48), nullable=True, unique=True, comment="MAC地址")				
				]]>
				</programlisting>
			</section>
			
			<section id="sqlalchemy.models.onupdate">
				<title>修改记录的时候触发更新</title>
				<para>onupdate 修改记录的时候触发更新</para>
				<programlisting>
			<![CDATA[
update_time = Column(DateTime, onupdate=datetime.now())
			]]>
				</programlisting>
			</section>
		</section>
		<section>
			<title>主键 Primary Key</title>
			<section>
				<title>复合主键 Composite Primary Key(也有叫 Compound Primary Key)</title>
				<programlisting>
				<![CDATA[
class MemberHasAndroid(Base):
    __tablename__ = "member_has_android"
    __table_args__ = (
        PrimaryKeyConstraint("member_id", "android_id"),
        {"comment": "会员设备"},
    )
    member_id = Column(Integer, ForeignKey("member.id"), nullable=False, comment="安卓ID")
    android_id = Column(
        String(16), ForeignKey("android.android_id"), nullable=False, comment="安卓ID"
    )				
				]]>
				</programlisting>
				<programlisting>
				<![CDATA[
CREATE TABLE `member_has_android` (
  `member_id` int NOT NULL COMMENT '安卓ID',
  `android_id` varchar(16) COLLATE utf8mb4_general_ci NOT NULL COMMENT '安卓ID',
  PRIMARY KEY (`member_id`,`android_id`),
  KEY `android_id` (`android_id`),
  CONSTRAINT `member_has_android_ibfk_1` FOREIGN KEY (`member_id`) REFERENCES `member` (`id`),
  CONSTRAINT `member_has_android_ibfk_2` FOREIGN KEY (`android_id`) REFERENCES `android` (`android_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='会员设备'				
				]]>
				</programlisting>
			</section>
		</section>
		
		<section id="sqlalchemy.models.ForeignKey">
			<title>外键</title>
			<programlisting>
			<![CDATA[
class Picture(Base):
    __tablename__ = "picture"
    id = Column(BIGINT, autoincrement=True, primary_key=True, comment="唯一ID")
    android_id = Column(String(16), nullable=False, comment="安卓设备ID")
    session = Column(String(36), nullable=False, unique=True, comment="回话ID")
    prompt = Column(String(250), nullable=False, comment="提示词")
    thumbnail = Column(String(250), nullable=True, comment="缩图")
    original = Column(String(250), nullable=True, comment="原始图片")
    image = Column(String(250), nullable=True, comment="图片")
    story = Column(TEXT, nullable=True, comment="故事")
    share = Column(Boolean, nullable=False, default=True, comment="共享")
    like = Column(INTEGER, nullable=False, default=0, comment="点赞")
    ctime = Column(DateTime, default=datetime.now(), comment="创建时间")
    mtime = Column(DateTime, default=datetime.now(), comment="修改时间")


class PictureLike(Base):
    __tablename__ = "picture_like"
    id = Column(BIGINT, autoincrement=True, primary_key=True, comment="唯一ID")
    android_id = Column(String(16), nullable=False, comment="安卓设备ID")
    picture_id = Column(
        BIGINT, ForeignKey("picture.id"), nullable=False, comment="图片ID"
    )
    ctime = Column(DateTime, default=datetime.now(), comment="创建时间")			
			]]>
			</programlisting>
			<section>
				<title>ON DELETE 删除外键约束</title>
				<screen>
				<![CDATA[
RESTRICT：	若子表中有父表对应的关联数据，删除父表对应数据，会阻止删除。默认项
NO ACTION：	在MySQL中，同RESTRICT。
CASCADE：	级联删除。
SET NULL：	父表对应数据被删除，子表对应数据项会设置为NULL。
				]]>
				</screen>
				<programlisting>
				<![CDATA[
class PictureBook(Base):
    __tablename__ = "picture_book"
    id = Column(Integer, autoincrement=True, primary_key=True, comment="主键")
    title = Column(String(50), nullable=False, comment="绘本名称")
    author = Column(String(50), nullable=False, comment="作者")
    cover = Column(String(50), nullable=False, comment="封面")
    description = Column(String(250), nullable=False, comment="描述")
    copyright = Column(String(250), nullable=False, comment="版权")
    isbn = Column(String(13), nullable=True, comment="ISBN")
    publisher = Column(String(13), nullable=True, comment="出版社")
    editon = Column(String(13), nullable=True, comment="编辑")
    ctime = Column(DateTime, default=datetime.now(), comment="创建时间")
    mtime = Column(
        DateTime, default=datetime.now(), onupdate=datetime.now(), comment="修改时间"
    )


class PictureBookHasPicture(Base):
    __tablename__ = "picture_book_has_picture"
    id = Column(BIGINT, autoincrement=True, primary_key=True, comment="主键")
    picture_book_id = Column(
        Integer, ForeignKey("picture_book.id", ondelete='CASCADE'), nullable=False, comment="绘本ID"
    )
    picture_id = Column(
        BIGINT, ForeignKey("picture.id"), nullable=False, comment="图片ID"
    )
    ctime = Column(DateTime, default=datetime.now(), comment="创建时间")
    mtime = Column(DateTime, default=datetime.now(), comment="修改时间")
				]]>
				</programlisting>
				<para>输出结果</para>
				<programlisting>
				<![CDATA[
CREATE TABLE `picture_book_has_picture` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `picture_book_id` int NOT NULL COMMENT '绘本ID',
  `picture_id` bigint NOT NULL COMMENT '图片ID',
  `ctime` datetime DEFAULT NULL COMMENT '创建时间',
  `mtime` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`),
  KEY `picture_book_id` (`picture_book_id`),
  KEY `picture_id` (`picture_id`),
  CONSTRAINT `picture_book_has_picture_ibfk_1` FOREIGN KEY (`picture_book_id`) REFERENCES `picture_book` (`id`) ON DELETE CASCADE,
  CONSTRAINT `picture_book_has_picture_ibfk_2` FOREIGN KEY (`picture_id`) REFERENCES `picture` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci
				]]>
				</programlisting>
			</section>
			<section>
				<title>ON UPDATE 更新外键约束</title>
				<programlisting>
				<![CDATA[
class PictureBookHasPicture(Base):
    __tablename__ = "picture_book_has_picture"
    id = Column(BIGINT, autoincrement=True, primary_key=True, comment="主键")
    picture_book_id = Column(
        Integer,
        ForeignKey("picture_book.id", ondelete="CASCADE", onupdate="CASCADE"),
        nullable=False,
        comment="绘本ID",
    )
    picture_id = Column(
        BIGINT, ForeignKey("picture.id"), nullable=False, comment="图片ID"
    )
    ctime = Column(DateTime, server_default=text("now()"), comment="创建时间")
    mtime = Column(
        DateTime, server_default=None, server_onupdate=text("now()"), comment="更新时间"
    )				
				]]>
				</programlisting>
				<para></para>
				<programlisting>
				<![CDATA[
CREATE TABLE `picture_book_has_picture` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
  `picture_book_id` int NOT NULL COMMENT '绘本ID',
  `picture_id` bigint NOT NULL COMMENT '图片ID',
  `ctime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `mtime` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `picture_book_id` (`picture_book_id`),
  KEY `picture_id` (`picture_id`),
  CONSTRAINT `picture_book_has_picture_ibfk_1` FOREIGN KEY (`picture_book_id`) REFERENCES `picture_book` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `picture_book_has_picture_ibfk_2` FOREIGN KEY (`picture_id`) REFERENCES `picture` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci				
				]]>
				</programlisting>
			</section>
		</section>
	</section>
	<section id="sqlalchemy.增删改操作">
		<title>增删改</title>
		<para>插入数据</para>
		<programlisting>
		<![CDATA[
from sqlalchemy.orm import sessionmaker
​
# 创建会话session
Session = sessionmaker(bind=engine)
session = Session()
# 新增数据
new_data = Employees(name='Neo', sex='男', age=25, birth='1980-10-24', jobs='CEO')
session.add(new_data)
session.commit()
session.close()		
		]]>
		</programlisting>
		<para>删除数据</para>
		<programlisting>
		<![CDATA[
from sqlalchemy.orm import sessionmaker
​
# 创建会话session
Session = sessionmaker(bind=engine)
session = Session()
# 删除数据
data = session.query(Employees).filter_by(id=1).delete()
print('已删除数据的数据量为:', data)
session.commit()
session.close()

session.query(Students).filter(Students.name == 'netkiller').delete()
session.commit()
		]]>
		</programlisting>
		<para>修改数据</para>
		<programlisting>
		<![CDATA[
# 创建会话session
Session = sessionmaker(bind=engine)
session = Session()

# 更新数据
session.query(Employees).filter_by(id=1).update({Employees.age: 12})
session.commit()
session.close()	

# 查询后更新数据
data = session.query(Employees).filter_by(id=5).first()
data.name = '张三'
session.commit()
session.close()	
		]]>
		</programlisting>
	</section>
	<section id="sqlalchemy.query">
		<title>查询</title>
		<para>打印SQL</para>
		<programlisting>
		<![CDATA[
        query = session.query(PictureLike).filter(
            PictureLike.android_id == android_id,
            PictureLike.picture_id == picture_id,
        )
        print(f"SQL: {query}")		
		]]>
		</programlisting>
		<para>所有数据</para>
		<programlisting>
		<![CDATA[
results = session.query(Player).all()
for result in results:
    print(f"查询结果为: {result}")		
		]]>
		</programlisting>
		<para>第一条数据</para>
		<programlisting>
		<![CDATA[
first = session.query(Player).first()
print(first)		
		]]>
		</programlisting>
		<para>LIKE</para>
		<programlisting>
		<![CDATA[
query_result = session.query(Player).filter(Player.name.like("%sa%"))		
		]]>
		</programlisting>
		<para>与操作符 and</para>
		<programlisting>
		<![CDATA[
query_result = session.query.filter(and_(Player.name == 'Salah', Player.id > 1))		
# 单个filter()中设置多个表达式
query_result = session.query.filter(Player.name == 'Salah', Player.id > 1)

# 使用多个filter()
query_result = session.query.filter(Player.name == 'Salah').filter(Player.id > 1)
		]]>
		</programlisting>
		<para>或操作符 or</para>
		<programlisting>
		<![CDATA[
from sqlalchemy import or_
		
results = session.query.filter(or_(Player.name == 'Salah', Player.id > 1))		
		]]>
		</programlisting>
		<para>IN 包含</para>
		<programlisting>
		<![CDATA[
query_result = session.query.filter(Player.club.in_(["Liverpool", "Chelsea"]))		
		]]>
		</programlisting>
		<para>NOT IN 排除</para>
		<programlisting>
		<![CDATA[
query_result = session.query.filter(~Player.country.in_(["Eygpt", "China"]))		
		]]>
		</programlisting>
		<para>slice 切片操作，返回 list</para>
		<programlisting>
		<![CDATA[
slice(起始值，结束值)

results = session.query(Arctire).slice(90,100).all()
print(results)

我们也可以使用如下方法，获得同样的结果。
results = session.query(Arctire)[90:100]
		]]>
		</programlisting>
		<para>其他操作</para>
		<screen>
		<![CDATA[
avg：求平均值。
max：求最大值。
min：求最小值。
sum：求和。		
		]]>
		</screen>
	</section>
	<section id="models.label">
		<title>标签</title>
		<programlisting>
		<![CDATA[
        results = (
            session.query(Picture.image.label("image"))
            .filter(Picture.android_id == android_id)
            .all()
        )
        data = [url[0] for url in results]		
		]]>
		</programlisting>
	</section>
	<section id="query.count">
		<title>统计数量</title>
		<programlisting>
		<![CDATA[
result = session.query(Students).count()
result = session.query(Students).filter(Students.name == 'neo').count()		
		]]>
		</programlisting>
	</section>
	<section id="query.order_by">
		<title>排序</title>
		<programlisting>
		<![CDATA[
results = session.query(Students).order_by(Students.id.desc()).all()	
		]]>
		</programlisting>
	</section>
	<section id="query.exists">
		<title>查询数据是否存在</title>
		<section>
			<title>返回 exists SQL 语句</title>
			<programlisting>
		<![CDATA[
        exist = (
            session.query(PictureLike)
            .filter(
                PictureLike.android_id == android_id,
                PictureLike.picture_id == picture_id,
            )
            .exists()
        )		
		]]>
			</programlisting>
			<para>输出结果</para>
			<screen>
		<![CDATA[
EXISTS (SELECT 1 
FROM picture_like 
WHERE picture_like.android_id = :android_id_1 AND picture_like.picture_id = :picture_id_1)		
		]]>
			</screen>
		</section>
		<section>
			<title>exists()</title>
			<programlisting>
		<![CDATA[
from sqlalchemy import exists

it_exists = Session.query(
    exists().where( SomeObject.field==value )
).scalar()		
		]]>
			</programlisting>
		</section>
		<section>
			<title>query.exists()</title>
			<programlisting>
			<![CDATA[
        query = session.query(PictureLike).filter(
            PictureLike.android_id == android_id,
            PictureLike.picture_id == picture_id,
        )
        print(f"SQL: {query}")
        exists = session.query(query.exists()).scalar()
        print(exists)
			]]>
			</programlisting>
		</section>
	</section>
	<section id="query.options">
		<title>返回指定列</title>
		<programlisting>
		<![CDATA[
async def open(picture_book_id: int):
    session = database.session()
    try:
        from sqlalchemy.orm import load_only

        data = (
            session.query(Picture)
            .join(PictureBookHasPicture, Picture.id == PictureBookHasPicture.picture_id)
            .filter(PictureBookHasPicture.picture_book_id == picture_book_id)
            .options(load_only(Picture.image, Picture.story))
            .all()
        )
        if data:
            response = Response(True, "打开绘本", data)
        else:
            response = Response(False, "打开绘本没有数据", data)
    except Exception as e:
        response = Response(False, e, None)
        logger.error(response)
    finally:
        session.close()
    logger.info(response)
    return response		
		]]>
		</programlisting>
	</section>
	<section id="sqlalchemy.func">
		<title></title>
		<programlisting>
		<![CDATA[
from sqlalchemy import func
		]]>
		</programlisting>
		<section>
			<title>count</title>
			<programlisting>
			<![CDATA[
        count, min, max = (
            session.query(
                func.count().label("count"),
                func.min(Picture.id).label("min"),
                func.max(Picture.id).label("max"),
            )
            .filter(Picture.android_id == android_id)
            .one()
        )
        data = {"count": count, "min": min, "max": max}			
			]]>
			</programlisting>
		</section>
		<section>
			<title>min/max</title>
			<programlisting>
				<![CDATA[

# 最大值
result = session.query(func.max(Article.price)).first()
print(result)

# 最小值
result = session.query(func.min(Article.price)).first()
print(result)


				
				]]>
			</programlisting>
			<programlisting>
			<![CDATA[
        data = session.query(
            func.min(Picture.id).label("min"), func.max(Picture.id).label("max")
        ).one()	
        
        min, max = session.query(
            func.min(Picture.id).label("min"), func.max(Picture.id).label("max")
        ).one()
        
        data = {"min": min, "max": max}        
			]]>
			</programlisting>
		</section>
		<section>
			<title>平均值/求和</title>
			<programlisting>
				<![CDATA[
# 平均值
result = session.query(func.avg(Article.price)).first()
print(result)
# 求和
result = session.query(func.sum(Article.price)).first()
print(result)				
				]]>
			</programlisting>
		</section>

		<section>
			<title></title>

		</section>

	</section>
</chapter>	