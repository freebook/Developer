<?xml version="1.0" encoding="UTF-8"?>
<section>
	<title>Requests</title>
	<screen>
		<![CDATA[
import requests

r = requests.get('https://api.github.com/user', auth=('netkiller', '******'))
print(r.status_code)
print(r.headers['content-type'])
print(r.encoding)
print(r.text)
print(r.json())
		
		]]>
	</screen>
</section>
<section id="httpx">
	<title>httpx</title>
	<section>
		<title>安装 https</title>

		<screen>
	<![CDATA[
python3 -m pip install httpx

# HTTP/2 支持，我们需要额外安装一个库

python3 -m pip install httpx[http2]
	
	]]>
		</screen>

	</section>
	<section>
		<title>操作演示</title>
		<programlisting>
		<![CDATA[
import httpx
r = httpx.get('https://www.example.org/')
r.text
r.content
r.json()
r.status_code		
		]]>
		</programlisting>
	</section>
	<section>
		<title>上传文件</title>
		<programlisting>
		<![CDATA[
import httpx

auth = httpx.BasicAuth(username="neo", password="admin")
client = httpx.Client(auth=auth, base_url="http://api.netkiller.cn:8080",timeout=60)

files = {'file': open('../datasets/tongue/val/images/black tongue coating_1.jpg', 'rb')}
response = client.post('/tongue/diagnosis', files=files)
print(response.status_code, response.json())		
		]]>
		</programlisting>
	</section>
	
	<section id="httpx.restful">
		<title>Restful CRUD 操作</title>
		<programlisting>
		<![CDATA[
r = httpx.get('https://netkiller.cn/get')
r = httpx.post('https://netkiller.cn/post', data={'key': 'value'})
r = httpx.put('https://netkiller.cn/put', data={'key': 'value'})
r = httpx.delete('https://netkiller.cn/delete')
r = httpx.head('https://netkiller.cn/head')
r = httpx.options('https://netkiller.cn/options')
		]]>
		</programlisting>
	</section>
	<section od="httpx.http2">
		<title>HTTP 2</title>
		<programlisting>
		<![CDATA[
import httpx
client = httpx.Client(http2=True, verify=False)
headers = {
    'Host': 'netkiller.com',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'sec-fetch-site': 'none',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-dest': 'document',
    'accept-language': 'zh-CN,zh;q=0.9'
}

response = client.get('https://www.netkiller.cn/linux/', headers=headers)
print(response.text)
		]]>
		</programlisting>
	</section>
	<section id="httpx.BasicAuth">
		<title>BasicAuth</title>
		<programlisting>
		<![CDATA[
import httpx

auth = httpx.BasicAuth(username="admin", password="admin")
client = httpx.Client(auth=auth, base_url="http://api.aigcsst.cn:8080")
response = client.get("/")
print(response.status_code, response.json())		
		]]>
		</programlisting>
	</section>
	<section id="httpx.async">
		<title>异步请求</title>
		<programlisting>
		<![CDATA[
async with httpx.AsyncClient() as client:
    resp = await client.get('https://www.netkiller.cn/index.html')
    assert resp.status_code == 200
    html = resp.text
		]]>
		</programlisting>
		<para>asyncio</para>
		<programlisting>
		<![CDATA[
import httpx
import asyncio

async def main():
    async with httpx.AsyncClient() as client:
        resp = await client.get("https://www.netkiller.cn")
        result = resp.text
        print(result)

asyncio.run(main())		
		]]>
		</programlisting>
	</section>
	<section id="httpx.log">
		<title>日志输出</title>
		<programlisting>
		<![CDATA[
import logging.config
import httpx

LOGGING_CONFIG = {
    "version": 1,
    "handlers": {
        "default": {
            "class": "logging.StreamHandler",
            "formatter": "http",
            "stream": "ext://sys.stderr"
        }
    },
    "formatters": {
        "http": {
            "format": "%(levelname)s [%(asctime)s] %(name)s - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        }
    },
    'loggers': {
        'httpx': {
            'handlers': ['default'],
            'level': 'DEBUG',
        },
        'httpcore': {
            'handlers': ['default'],
            'level': 'DEBUG',
        },
    }
}

logging.config.dictConfig(LOGGING_CONFIG)
httpx.get('https://www.example.com')		
		]]>
		</programlisting>
	</section>
</section>