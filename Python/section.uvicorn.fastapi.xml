<?xml version="1.0" encoding="UTF-8"?>
<section id="fastapi">
	<title>FastAPI</title>
	<section>
		<title>Post Request</title>
		<section>
			<title>From 数据</title>
			<screen>
			<![CDATA[
pip install python-multipart
			]]>
			</screen>
			<programlisting>
            	<![CDATA[
from fastapi import FastAPI, Form
# from starlette.requests import Request
from starlette.responses import Response
from starlette.testclient import TestClient

app = FastAPI()

@app.post("/form")
async def login(username: str = Form(), password: str = Form()):
    return {"username": username, "password": password}

client = TestClient(app)
data = {"username": "netkiller", "password": "123456"}
response = client.post("/form", data=data)
print(response.content.decode())
            	]]>
			</programlisting>
		</section>
		<section>
			<title>Json 数据</title>

			<programlisting>
            <![CDATA[ 
from fastapi import FastAPI, Request
from typing import Dict

# from starlette.requests import Request
from starlette.responses import Response
from starlette.testclient import TestClient

app = FastAPI()


@app.post("/json")
async def json(item: dict):
    print(item)
    return "OK"


client = TestClient(app)
data = {"key": "value"}
response = client.post("/json", json=data)
print(response.content.decode())      
            ]]>
			</programlisting>
		</section>
		<section>
			<title>Data 原始数据</title>

			<programlisting>
		    <![CDATA[
from fastapi import FastAPI, Request

# from starlette.requests import Request
from starlette.responses import Response
from starlette.testclient import TestClient

app = FastAPI()


@app.post("/webhook")
async def the_webhook(request: Request):
    return await request.body()


data = b"""EURUSD Less Than 1.09092
{"Condition": "value"}
[3,4,5,]
{}"""

data = b"""EURUSD Less Than 1.09092"""

client = TestClient(app)
response = client.post("/webhook", data=data)
print(response.content.decode())
            ]]>
			</programlisting>
		</section>
	</section>
	<section>
		<title>slowapi 流向控制</title>
		<programlisting>
		<![CDATA[
pip install slowapi		
		]]>
		</programlisting>
		<para></para>
		<programlisting>
		<![CDATA[
from fastapi import FastAPI
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address


limiter = Limiter(key_func=get_remote_address)
app = FastAPI()
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

@app.get("/home")
@limiter.limit("5/minute")
async def homepage(request: Request):
    return PlainTextResponse("test")

@app.get("/mars")
@limiter.limit("5/minute")
async def homepage(request: Request, response: Response):
    return {"key": "value"}		
		]]>
		</programlisting>
	</section>
	<section>
		<title>异步执行</title>
		<programlisting>
		<![CDATA[
from fastapi import APIRouter
import time
import asyncio
 
router = APIRouter()

 
@router.get("/a")
async def a():
    time.sleep(1)
    return {"message": "异步模式，但是同步执行sleep函数，执行过程是串行的"}
 
 
@router.get("/b")
async def b():
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, time.sleep, 1)
    return {"message": "异步线程池中运行sleep函数"}
 
 
@router.get("/c")
async def c():
    await asyncio.sleep(1)
    return {"message": "异步模式，且异步执行sleep函数"}
 
 
@router.get("/d")
def d():
    time.sleep(1)
    return {"message": "同步模式"}
		]]>
		</programlisting>
	</section>
	<section>
		<title>缓存</title>
		<screen>
		<![CDATA[
pip install fastapi-cache2
		]]>
		</screen>
		<programlisting>
		<![CDATA[
from fastapi import FastAPI
from starlette.requests import Request
from starlette.responses import Response

from fastapi_cache import FastAPICache
from fastapi_cache.backends.redis import RedisBackend
from fastapi_cache.decorator import cache

from redis import asyncio as aioredis

app = FastAPI()


@cache()
async def get_cache():
    return 1


@app.get("/")
@cache(expire=60)
async def index():
    return dict(hello="world")


@app.on_event("startup")
async def startup():
    redis = aioredis.from_url("redis://localhost", encoding="utf8", decode_responses=True)
    FastAPICache.init(RedisBackend(redis), prefix="fastapi-cache")		
		]]>
		</programlisting>
	</section>
</section>