<?xml version="1.0" encoding="UTF-8"?>
<section>
	<title>文件和目录</title>
	<section id="io.file">
		<title>文件操作</title>
		<section>
			<title>读取文件</title>
			<programlisting role="python">
		<![CDATA[
f = open('/tmp/workfile', 'r+')
f.write('0123456789abcdef')
f.seek(5)     # Go to the 6th byte in the file
f.read(1)
f.seek(-3, 2) # Go to the 3rd byte before the end
f.read(1)
f.readline()
f.close()
		]]>
			</programlisting>
			<screen>
			<![CDATA[
for line in open("myfile.txt"):
    print line

with open("myfile.txt") as f:
    for line in f:
        print line
			]]>
			</screen>

		</section>
		<section>
			<title>读取二进制文件</title>
			<para></para>
			<programlisting>
			<![CDATA[
with open('beak', 'rb+') as f:
    content = f.read()
    f.seek(0)
    f.write(content.replace(b'\r', b''))
    f.truncate()
			]]>
			</programlisting>
		</section>
		<section>
			<title>获取文件名</title>
			<para>使用os.path.basename()获取文件名</para>
			<screen>
			<![CDATA[
import os

# 定义一个文件路径
file_path = "/home/user/documents/example.txt"

# 使用os.path.basename()获取文件名
file_name = os.path.basename(file_path)

print(file_name)  # 输出: example.txt			
			]]>
			</screen>
		</section>
		<section>
			<title>获取扩展名</title>
			<programlisting>
			<![CDATA[
import os

# 定义一个文件路径
file_path = "/home/user/documents/example.txt"

# 使用os.path.splitext()获取文件名和扩展名
file_name, file_extension = os.path.splitext(file_path)

print("文件名:", file_name)  # 输出: 文件名: /home/user/documents/example
print("扩展名:", file_extension)  # 输出: 扩展名: .txt	

file_extension = file_extension[1:]  # 去掉点号
print("去掉点号的扩展名:", file_extension)  # 输出: 去掉点号的扩展名: txt		
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
import os
ext = os.path.splitext("path/to/file.ext")[-1][1:]
print(ext)
			]]>
			</programlisting>
			<para></para>
			<programlisting>
			<![CDATA[
path = "path/to/file.ext"
suffix = path.split(".")[1]
print("suffix: {}".format(suffix))			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
import re

filename = "example.txt"
extension = re.findall(r"\.[^.]*$", filename)[0]
print(extension)			
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
filename = "myfile.txt"

extension = filename.rsplit(".", 1)[1]

print(extension)  # 输出：".txt"			
			]]>
			</programlisting>
		</section>
	</section>
	<section>
		<title>创建目录</title>
		<programlisting>
		<![CDATA[
dir_name = "neo"
if not os.path.exists(dir_name):
    os.mkdir(dir_name)
		]]>
		</programlisting>
	</section>
	<section id="os.access">
		<title>权限判断</title>
		<programlisting>
		<![CDATA[
	# 判断文件写权限
    ret = os.access(filename, os.W_OK)
    print('文件的写权限：',ret)

	# 判断文件读权限
	ret = os.access(filename,os.R_OK)
    print('文件的读权限：',ret)		
    
	# 判断文件执行权限
	ret = os.access(filename, os.X_OK)
	print('文件的执行权限：',ret)
    
		]]>
		</programlisting>
	</section>
	<section>
		<title>目录和文件列表</title>
		<section>
			<title>遍历当前目录</title>
			<programlisting language="python">
			<![CDATA[
import os

path = "/etc"
files = []
for name in os.listdir("/etc/"):
    if os.path.isfile(os.path.join(path, name)):
        files.append(name)

print(files)	
			]]>
			</programlisting>
			<para>随机抽取一个文件</para>
			<programlisting>
			<![CDATA[
import os
from random import choice

path = "/etc"
files = []
for name in os.listdir("/etc/"):
    if os.path.isfile(os.path.join(path, name)):
        files.append(name)

file = choice(files)
print(file)
			]]>
			</programlisting>
		</section>
		<section>
			<title>递归遍历目录</title>
			<para>os.walk() 的基本用法</para>
			<literallayout>
			<![CDATA[
os.walk(top, topdown=True, onerror=None, followlinks=False) 是 os 模块中的一个函数，用于生成遍历目录树的文件名。这个函数返回一个三元组 (dirpath, dirnames, filenames)。

参数详解

top：要遍历的顶级目录的路径。
topdown (可选)：如果为 True（默认值），则从顶级开始向下遍历。如果为 False，则从底部的子目录开始向上遍历。
onerror (可选)：是一个函数，用于错误处理。如果指定，则应该是一个接受单个参数（异常实例）的函数。如果未指定或为 None，错误将被忽略。
followlinks (可选)：如果为 True，则会遍历符号链接指向的目录。

返回值

dirpath 是一个字符串，表示正在遍历的目录的路径。
dirnames 是一个列表，包含了 dirpath 下所有子目录的名字，不包含孙子目录。
filenames 是一个列表，包含了非目录文件的名字。
			]]>
			</literallayout>
			<programlisting>
			<![CDATA[
    def walkdir(self):
        for dirpath, dirnames, filenames in os.walk('/etc'):
            print(f"dirpath={dirpath}, dirnames={dirnames}, filenames={filenames}")
            # print(filenames)			
			]]>
			</programlisting>
			<para>使用 os.listdir 手工实现递归列目录</para>
			<programlisting>
			<![CDATA[
    def scandir(self, path):
        try:

            for name in os.listdir(path):
                current_path = os.path.join(path, name)
                access = os.access(current_path, os.R_OK)
                if access:
                    # print(access)
                    if os.path.isfile(current_path):
                        print(current_path)

                    if os.path.isdir(current_path):
                        self.scandir(current_path)
    
        except Exception as e:
            print(e)
            
    # 是否允许递归
    def scandir(self, path, recursion=False):
        try:

            for name in os.listdir(path):
                current_path = os.path.join(path, name)
                access = os.access(current_path, os.R_OK)
                if access:
                    # print(access)
                    if os.path.isfile(current_path):
                        print(current_path)

                    if recursion and os.path.isdir(current_path):
                        self.scandir(current_path)
        except Exception as e:
            print(e)            
	        ]]>
			</programlisting>
			<para>glob</para>
			<programlisting>
			<![CDATA[
    def glob(self):
    	# 当前目录
        for file in glob.glob('*.conf', root_dir='/etc'):
            print(file)			

		# 递归遍历目录
        for file in glob.glob('**/*.conf', root_dir='/etc'):
            print(file)			
			]]>
			</programlisting>
		</section>

	</section>
	<section id="os.">
		<title>删除文件或目录</title>
		<para>删除文件</para>
		<programlisting>
		<![CDATA[
import os

os.remove(path) 
		]]>
		</programlisting>
		<para>删除空文件夹 os.removedirs(path)</para>
		<programlisting>
		<![CDATA[
import os	
os.removedirs("/path/to/your")		
		]]>
		</programlisting>		
		<para>递归删除文件夹</para>
		<programlisting>
		<![CDATA[
import shutil
shutil.rmtree(path)		
		]]>
		</programlisting>
	</section>
	<section>
		<title>路径操作</title>
		<section>
			<title>获取父目录</title>
			<programlisting>
			<![CDATA[
from pathlib import Path

path1 = Path(r"C:\folder\subfolder\file.txt")
path2 = Path(r"C:\file.txt")
path3 = Path(r"/home/neo/file.txt")
print(path1.parent)
print(path2.parent)
print(path3.parent)
print(path3.parent.parent)	
			]]>
			</programlisting>
			<para>输出结果</para>
			<screen>
			<![CDATA[
C:\folder\subfolder
C:\
\home\neo
\home			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
from pathlib import Path
p1 = Path("/Users/neo/files/neo.txt")
print(p1.parent.absolute())
print(p1.parents[2])
			]]>
			</programlisting>
			<para>输出结果</para>
			<screen>
			<![CDATA[
D:\Users\neo\files
\Users		
			]]>
			</screen>
			<programlisting>
			<![CDATA[
import os
from pathlib import Path

path1 = Path(r"C:\folder\subfolder\file.txt")
path2 = Path(r"/home/neo/file.txt")

print(os.path.abspath(os.path.join(path1, os.pardir)))
print(os.path.abspath(os.path.join(path2, os.pardir)))

print(os.path.abspath(os.path.join(path1, '..')))
print(os.path.abspath(os.path.join(path2, '..')))

print(os.path.dirname(path1))
print(os.path.dirname(path2))

print(os.path.dirname(os.path.dirname(path1)))
			]]>
			</programlisting>
			<para>输出结果</para>
			<screen>
			<![CDATA[
C:\folder\subfolder
D:\home\neo
C:\folder\subfolder
D:\home\neo
C:\folder\subfolder
\home\neo	
			]]>
			</screen>
			
		</section>
	</section>	
	
</section>