<?xml version="1.0" encoding="UTF-8"?>
<chapter id="face_recognition">
	<title>人脸识别</title>
	<para>人脸识别，是基于人的脸部特征信息进行身份识别的一种生物识别技术。用照相机、摄像机或摄像头采集含有人脸的图像或视频流，并自动在图像中检测和跟踪人脸，进而对检测到的人脸进行脸部识别的一系列相关技术，通常也叫做人像识别、面部识别。</para>
	<ulink url="https://github.com/ageitgey/face_recognition" />
	<para>face_recognition，这个是一个开源的人脸识别库，该模块是基于业内领先的C++开源库dlib中的深度学习模型，用<ulink url="https://link.zhihu.com/?target=http%3A//vis-www.cs.umass.edu/lfw/">Labeled Faces in the Wild</ulink>人脸数据集进行测试，有高达99.38%的准确率。</para>	
	
	<section>
		<title>安装</title>
		<para>需要用到 dlib,face_recognition,opencv 这三个模块。</para>
		<screen>
		<![CDATA[
pip3 install dlib
pip3 install opencv-python
pip3 install face_recognition
		]]>
		</screen>
	</section>
	<section>
		<title>命令行工具</title>
		<section>
			<title>face_detection - 在单张图片或一个图片文件夹中定位人脸位置</title>
			<para>首先，准备一个已知名字的人脸图片文件夹，每个人一张图，图片的文件名对应人的名字</para>
			<para>然后，你需要准备第二个图片文件夹，文件夹内放置你希望识别的图片</para>
			<para>最后，适用face_recognition命令行工具，认出是谁的人脸。</para>
			<screen>
			<![CDATA[
$ face_recognition ./know_people/ ./unknown_pictures/
			]]>
			</screen>
		</section>
		<section>
			<title>face_detection - 在单张图片或一个图片文件夹中定位人脸位置</title>
			<para>输出结果是人脸坐标位置</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/python/face % face_detection ./   
./6.jpeg,251,423,509,165
./5.jpeg,85,365,157,293
./face.jpeg,198,680,508,370
./2.jpg,321,1023,692,651
./1.jpg,164,818,474,508		
			]]>
			</screen>
			<para>每一行对应图片中的一张脸，输出坐标代表着这张脸的上、右、下、左像素点。</para>
		</section>
	</section>
	<section>
		<title>定位头像位置</title>
		<programlisting>
		<![CDATA[
import face_recognition as face

image = face.load_image_file("face.jpeg")
face_locations = face.face_locations(image)

print(face_locations)		
		]]>
		</programlisting>
		<screen>
		<![CDATA[
neo@MacBook-Pro-Neo ~/workspace/python/face % python3.9 /Users/neo/workspace/python/face/face_locations.py
[(231, 676, 498, 409)]		
		]]>
		</screen>
		<para>使用深度学习模型达到更加精准的人脸定位</para>
		<programlisting>
		<![CDATA[
import face_recognition

image = face_recognition.load_image_file("my_picture.jpg")
face_locations = face_recognition.face_locations(image, model="cnn")		
		]]>
		</programlisting>
		<example>
			<title>找出图片中头像</title>
			<programlisting>
			<![CDATA[
import PIL.Image as img
import face_recognition as face

file = "face.jpeg"
image = face.load_image_file(file)
face_locations = face.face_locations(image)

print(face_locations)

if face_locations:
    (top, right, bottom, left) = face_locations[0]
    im = img.open(file)
    box = (left, top, right, bottom)
    head = im.crop(box)
    head.save('head.jpg')			
			]]>
			</programlisting>
		</example>
	</section>
	<section>
		<title>人脸比较</title>
		<programlisting>
		<![CDATA[
import face_recognition

picture_of_me = face_recognition.load_image_file("me.jpeg")
my_face_encoding = face_recognition.face_encodings(picture_of_me)[0]

# my_face_encoding now contains a universal 'encoding' of my facial features that can be compared to any other picture of a face!

unknown_picture = face_recognition.load_image_file("unknown.jpeg")
unknown_face_encoding = face_recognition.face_encodings(unknown_picture)[0]

# Now we can see the two face encodings are of the same person with `compare_faces`!

results = face_recognition.compare_faces(
    [my_face_encoding], unknown_face_encoding)

if results[0] == True:
    print("It's a picture of me!")
else:
    print("It's not a picture of me!")

results = face_recognition.compare_faces([my_face_encoding], my_face_encoding)

if results[0] == True:
    print("It's a picture of me!")
else:
    print("It's not a picture of me!")
		
		]]>
		</programlisting>
		<screen>
		<![CDATA[]]>
		</screen>
	</section>
	
	<section>
		<title>摄像头识别人脸</title>
		<programlisting>
		<![CDATA[
import face_recognition
import cv2
import numpy as np

# Get a reference to webcam #0 (the default one)
video_capture = cv2.VideoCapture(1)

# Load a sample picture and learn how to recognize it.
image = face_recognition.load_image_file("me.jpg")
known_face_encodings = face_recognition.face_encodings(image)[0]

while True:
    # Grab a single frame of video
    ret, frame = video_capture.read()

    # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)
    rgb_frame = frame[:, :, ::-1]

    # Find all the faces and face enqcodings in the frame of video
    face_locations = face_recognition.face_locations(rgb_frame)
    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

    # Loop through each face in this frame of video
    for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
        # See if the face is a match for the known face(s)
        matches = face_recognition.compare_faces(
            [known_face_encodings], face_encoding)

        name = "Unknown"

        if matches[0] == True:
            print("It's a picture of me!")
        else:
            print("It's not a picture of me!")

        # Or instead, use the known face with the smallest distance to the new face
        face_distances = face_recognition.face_distance(
            [known_face_encodings], face_encoding)
        best_match_index = np.argmin(face_distances)
        if matches[best_match_index]:
            name = 'netkiller'

        # Draw a box around the face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)

        # Draw a label with a name below the face
        cv2.rectangle(frame, (left, bottom - 35),
                      (right, bottom), (0, 0, 255), cv2.FILLED)
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (left + 6, bottom - 6),
                    font, 1.0, (255, 255, 255), 1)

    # Display the resulting image
    cv2.imshow('Video', frame)

    # Hit 'q' on the keyboard to quit!
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release handle to the webcam
video_capture.release()
cv2.destroyAllWindows()
		
		]]>
		</programlisting>
	</section>
	
</chapter>
