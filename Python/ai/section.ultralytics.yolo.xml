<?xml version="1.0" encoding="UTF-8"?>
<section id="yolo">
	<title>YOLO</title>
	<orderedlist>
		<title>普通列表</title>
		<listitem>YOLO11：用于经典的目标检测任务。</listitem>
		<listitem>YOLO11-seg：用于实例分割，识别和分割图像中的对象。</listitem>
		<listitem>YOLO11-pose：用于关键点姿态估计，即确定人体的关键点（如关节位置）。</listitem>
		<listitem>YOLO11-obb：用于定向检测，可以识别并确定具有方向性物体的边界框（例如倾斜的目标物体）。</listitem>
		<listitem>YOLO11-cls：用于分类，负责对图像中的对象进行类别识别。</listitem>
	</orderedlist>
	<section>
		<title>预测</title>
		<programlisting>
		<![CDATA[
from ultralytics import YOLO

# 加载预训练的YOLOv11n模型
model = YOLO("yolo11n.pt")  # yolo11n.pt, yolo11s.pt, yolo11m.pt, yolo11x.pt

# 对'bus.jpg'图像进行推理，并获取结果 https://ultralytics.com/images/bus.jpg
results = model.predict("https://ultralytics.com/images/bus.jpg", save=True, imgsz=320, conf=0.5)

# 处理返回的结果
for result in results:
    boxes = result.boxes  # 获取边界框信息
    probs = result.probs  # 获取分类概率
    result.show()  # 显示结果型的架构
    print(boxes)
    print(probs)		
		]]>
		</programlisting>
		<para>换一个模型，试试 yolo11n-seg.pt</para>
		<programlisting>
		<![CDATA[
from ultralytics import YOLO

model = YOLO("yolo11n-seg.pt")
results = model.predict("https://ultralytics.com/images/bus.jpg", save=True, imgsz=320, conf=0.5)

# 处理返回的结果
for result in results:
    boxes = result.boxes  # 获取边界框信息
    probs = result.probs  # 获取分类概率
    print(boxes)
    print(probs)
    result.show()  # 显示结果型的架构		
		]]>
		</programlisting>
	</section>
	<section>
		<title>导出</title>
		<section>
			<title>onnx 格式</title>
			<screen>
			<![CDATA[
(.venv) neo@Neo-Mac-mini netkiller % pip install onnx onnxslim -i https://pypi.tuna.tsinghua.edu.cn/simple		
			]]>
			</screen>
			<programlisting>
			<![CDATA[
from ultralytics import YOLO

model = YOLO("yolo11n.pt")
model.export(format="onnx")

# 预测看下效果
onnx_model = YOLO("yolo11n.onnx", task="detect")
results = onnx_model("https://ultralytics.com/images/bus.jpg")
results[0].show()		
			]]>
			</programlisting>
		</section>
		<section>
			<title>engine 格式</title>
			<programlisting>
			<![CDATA[
from ultralytics import YOLO

model = YOLO("yolo11n.pt")
model.export(format="engine")
tensorrt_model = YOLO("yolo11n.engine", task="detect")
results = tensorrt_model("https://ultralytics.com/images/bus.jpg")
results[0].show()			
			]]>
			</programlisting>
		</section>
		
	</section>
</section>