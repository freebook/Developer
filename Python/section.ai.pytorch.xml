<?xml version="1.0" encoding="UTF-8"?>
<section id="index"><?dbhtml dir="pytorch" ?>
	<title>PyTorch</title>
	<section>
		<title>Cifar10</title>
		<section>
			<title>初始化</title>
			<screen>
			<![CDATA[
pip install --upgrade pip
pip install pytorch torchvision numpy
	
			]]>
			</screen>
		</section>

	</section>
	<section>
		<title>Module</title>
		<programlisting>
			<![CDATA[
import torch
from torch import nn

class MyModel(nn.Module):
    def __init__(self)->None:
        super().__init__()

        self.conv1 = nn.Conv2d(in_channels=3,out_channels=32,kernel_size=5,stride=1,padding=2)
        self.maxpool1 = nn.MaxPool2d(kernel_size=2)
        self.conv2 = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=5, stride=2, padding=2)
        self.maxpool2 = nn.MaxPool2d(kernel_size=2)
        self.conv3 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=5, stride=1, padding=2)
        self.maxpool3 = nn.MaxPool2d(kernel_size=2)

        self.flatten = nn.Flatten()
        self.linear1 = nn.Linear(1024,64)
        self.linear2 = nn.Linear(64, 10)
        self.softmax = nn.Softmax(dim=1)

    def forward(self,x):
        x = self.conv1(x)
        x = self.maxpool1(x)

        x = self.conv2(x)
        x = self.maxpool2(x)

        x = self.conv3(x)
        x = self.maxpool3(x)

        return x

inputs = torch.randn(1,3,32,32)
myModel = MyModel()
outputs = myModel(inputs)
print(outputs)
			]]>
		</programlisting>
	</section>
	&section.ai.torchvision.xml;
	<section>
		<title>FAQ</title>
		<section>
			<title></title>
			<programlisting>
			<![CDATA[
			]]>
			</programlisting>
		</section>
	</section>
</section>