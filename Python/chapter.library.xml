<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: chapter.library.xml 661 2013-08-12 10:24:47Z netkiller $ -->
<chapter id="index"><?dbhtml dir="library" ?>
	<title>Library</title>
<section>
	<title>日期与时间</title>
	<para>当前日期</para>
	<screen>
import time	
dt = time.strftime('%Y-%m-%d.%X',time.localtime(time.time()))
print(dt)	
	</screen>
	<screen>
	<![CDATA[
>>> import time 
>>> dt = time.strftime('%Y-%m-%d.%X',time.localtime(time.time()))
>>> print(dt)
2014-01-23.11:07:28	
	]]>
	</screen>
</section>	
	&chapter.library.threading.xml;
	&chapter.library.syslog.xml;
	&chapter.library.socket.xml;

<section id="daemon">
	<title>Daemon</title>
	<para>http://www.myelin.co.nz/post/2003/3/13/#200303135</para>
	<programlisting language="python">
	<![CDATA[
#!/usr/bin/env python

import os, sys

print "I'm going to fork now - the child will write something to a pipe, and the parent will read it back"

r, w = os.pipe()           # r,w是文件描述符, 不是文件对象

pid = os.fork()
if pid:
    # 父进程
    os.close(w)           # 关闭一个文件描述符
    r = os.fdopen(r)      # 将r转化为文件对象
    print "parent: reading"
    txt = r.read()
    os.waitpid(pid, 0)   # 确保子进程被撤销
else:
    # 子进程
    os.close(r)
    w = os.fdopen(w, 'w')
    print "child: writing"
    w.write("here's some text from the child")
    w.close()
    print "child: closing"
    sys.exit(0)

print "parent: got it; text =", txt
	]]>
	</programlisting>
	<programlisting language="python">
	<![CDATA[
import sys, os

if __name__ == "__main__":
    # do the UNIX double-fork magic, see Stevens' "Advanced
    # Programming in the UNIX Environment" for details (ISBN 0201563177)
    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            sys.exit(0)
    except OSError, e:
        print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)

    # decouple from parent environment
    os.chdir("/")
    os.setsid()
    os.umask(0)

    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent, print eventual PID before
            print "Daemon PID %d" % pid
            sys.exit(0)
    except OSError, e:
        print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)

    # start the daemon main loop
	]]>
	</programlisting>
	<para></para>
	<programlisting language="python">
# Redirect standard file descriptors
sys.stdin = open('/dev/null', 'r')
sys.stdout = open('/dev/null', 'w')
sys.stderr = open('/dev/null', 'w')
	</programlisting>
</section>

	<section id="python-memcached">
		<title>python-memcached</title>
		<link linkend="python">参考Python安装</link>
		<screen>
wget ftp://ftp.tummy.com/pub/python-memcached/python-memcached-1.34.tar.gz
tar zxvf python-memcached-1.34.tar.gz
cd python-memcached-1.34
		</screen>
		<para># python setup.py install</para>
		<screen>
running install
running build
running build_py
creating build
creating build/lib
copying memcache.py -> build/lib
running install_lib
copying build/lib/memcache.py -> /usr/lib/python2.3/site-packages
byte-compiling /usr/lib/python2.3/site-packages/memcache.py to memcache.pyc

		</screen>
		<example>
			<title>memcached.py</title>
			<screen>
import memcache
mc = memcache.Client(['127.0.0.1:11211'], debug=1)

mc.set("some_key", "Some value")
value = mc.get("some_key")
print value

mc.set("another_key", 3)
mc.delete("another_key")

mc.set("key", "1")   # note that the key used for incr/decr must be a string.
mc.incr("key")
mc.decr("key")
			</screen>
		</example>
	</section>
	<section id="pyro">
		<title>Pyro - Pyro is short for PYthon Remote Objects</title>
		<para>http://pyro.sourceforge.net/</para>
	</section>
	<section id="python-imaging">
		<title>Python Imaging Library</title>
		<para>Debian/Ubuntu</para>
		<screen>
sudo apt-get install libjpeg62-dev
sudo apt-get install python-imaging
		</screen>
		<para>采用源码安装</para>
		<screen>
tar zxvf Imaging-1.1.6.tar.gz
cd Imaging-1.1.6/
		</screen>
		<command>sudo python setup.py install</command>
		<note>
			<title>decoder jpeg not available</title>
			<para>首先确认jpeg库是否安装</para>
			<para>find / -name jpeglib.h</para>
			<para>然后修改头文件</para>
			<para>Imaging-1.1.6/libImaging</para>
			<para>修改Jpeg.h, #include "jpeglib.h" 改为</para>
			<para>#include "/usr/include/jpeglib.h"</para>
		</note>
	</section>
	<section id="getopt">
		<title>getopt – Command line option parsing</title>
	</section>
	&chapter.library.syslog.xml;
<section id="python-subversion">
	<title>python-subversion</title>
	<screen>
$ sudo apt-get install python-subversion
	</screen>
	<screen>
$ dpkg -L python-subversion
/.
/usr
/usr/share
/usr/share/python-support
/usr/share/python-support/python-subversion.public
/usr/share/doc
/usr/share/doc/python-subversion
/usr/share/doc/python-subversion/examples
/usr/share/doc/python-subversion/examples/svnlook.py.gz
/usr/share/doc/python-subversion/examples/dumpprops.py
/usr/share/doc/python-subversion/examples/blame.py
/usr/share/doc/python-subversion/examples/svnshell.py.gz
/usr/share/doc/python-subversion/examples/revplist.py
/usr/share/doc/python-subversion/examples/putfile.py
/usr/share/doc/python-subversion/examples/getfile.py
/usr/share/doc/python-subversion/examples/check-modified.py
/usr/share/doc/python-subversion/examples/get-location-segments.py
/usr/share/doc/python-subversion/examples/geturl.py
/usr/share/doc/python-subversion/changelog.gz
/usr/share/doc/python-subversion/copyright
/usr/share/doc/python-subversion/changelog.Debian.gz
/usr/share/doc/python-subversion/README.Debian
/usr/share/lintian
/usr/share/lintian/overrides
/usr/share/lintian/overrides/python-subversion
/usr/share/pyshared
/usr/share/pyshared/libsvn
/usr/share/pyshared/libsvn/delta.py
/usr/share/pyshared/libsvn/client.py
/usr/share/pyshared/libsvn/core.py
/usr/share/pyshared/libsvn/ra.py
/usr/share/pyshared/libsvn/fs.py
/usr/share/pyshared/libsvn/wc.py
/usr/share/pyshared/libsvn/__init__.py
/usr/share/pyshared/libsvn/repos.py
/usr/share/pyshared/libsvn/diff.py
/usr/share/pyshared/svn
/usr/share/pyshared/svn/delta.py
/usr/share/pyshared/svn/client.py
/usr/share/pyshared/svn/core.py
/usr/share/pyshared/svn/ra.py
/usr/share/pyshared/svn/fs.py
/usr/share/pyshared/svn/wc.py
/usr/share/pyshared/svn/__init__.py
/usr/share/pyshared/svn/repos.py
/usr/share/pyshared/svn/diff.py
/usr/bin
/usr/bin/svnshell
/usr/lib
/usr/lib/libsvn_swig_py2.6-1.so.1.0.0
/usr/lib/pyshared
/usr/lib/pyshared/python2.6
/usr/lib/pyshared/python2.6/libsvn
/usr/lib/pyshared/python2.6/libsvn/_delta.so
/usr/lib/pyshared/python2.6/libsvn/_repos.so
/usr/lib/pyshared/python2.6/libsvn/_fs.so
/usr/lib/pyshared/python2.6/libsvn/_client.so
/usr/lib/pyshared/python2.6/libsvn/_core.so
/usr/lib/pyshared/python2.6/libsvn/_diff.so
/usr/lib/pyshared/python2.6/libsvn/_wc.so
/usr/lib/pyshared/python2.6/libsvn/_ra.so
/usr/lib/libsvn_swig_py2.6-1.so.1

	</screen>
</section>
	<section id="simplehttpserver">
		<title>SimpleHTTPServer</title>
		<example>
			<title>SimpleHTTPServer</title>
			<screen>
			<![CDATA[
python -m SimpleHTTPServer &
			]]>
			</screen>
			<screen>
curl http://localhost:8000/
			</screen>
		</example>
	</section>
<section id="fuse-python">
	<title>fuse-python.x86_64 : Python bindings for FUSE - filesystem in userspace</title>

</section>

<section id="python.network">
	<title>Network</title>
	<section id="gevent">
		<title>gevent - A coroutine-based network library for Python</title>
		<para>http://www.gevent.org/</para>
	</section>
</section>

	&chapter.library.tui.xml;
	
<section id="python-spdylay">
	<title>Python-spdylay - Spdylay Python Extension Module</title>
	<para><ulink url="http://spdylay.sourceforge.net/" /></para>
</section>	
<section id="mechanize">
	<title>mechanize</title>
	<para><ulink url="http://wwwsearch.sourceforge.net/mechanize/" /></para>
	<para>Ubuntu</para>
	<screen>
$ sudo apt-get install python-mechanize
	</screen>
	<para>Pip</para>
	<screen>
$ sudo pip install mechanize	
	</screen>
	<para>Python 3</para>
	<screen>
git clone https://github.com/adevore/mechanize.git	
cd mechanize/
git checkout python3
	</screen>
</section>
<section id="zope.testbrowser">
	<title>zope.testbrowser</title>
	<para></para>
	<screen>
pip install splinter[zope.testbrowser]	
	</screen>
</section>	

<section>
	<title>pandas - Python Data Analysis Library</title>
</section>
<section>
	<title>NumPy</title>
	<para>NumPy is the fundamental package for scientific computing with Python.</para>
</section>

</chapter>
