<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: chapter.php.class.xml 510 2012-12-25 07:40:23Z netkiller $ -->
<section id="class">
	<title>PHP Classes 类与对象</title>
	<section id="class.construct">
		<title>构造函数和析构函数  __construct() / __destruct()</title>
		<programlisting>
		<![CDATA[
<?php
class MyClass {
   function __construct() {
       print "In constructor\n";
       $this->name = "MyClass";
   }

   function __destruct() {
       print "Destroying " . $this->name . "\n";
   }
}

$obj = new MyClass();
?>
		]]>
		</programlisting>
		<programlisting>
		<![CDATA[
class Members extends Common{

	public function __construct() {
		parent::__construct();
	}
}
		]]>
		</programlisting>
	</section>
	<section id="traits">
		<title>Traits</title>
		<para>http://php.net/manual/en/language.oop5.traits.php</para>
		<programlisting>
		<![CDATA[
<?php
class Base {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait SayWorld {
    public function sayHello() {
        parent::sayHello();
        echo 'World!';
    }
}

class MyHelloWorld extends Base {
    use SayWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
?>


<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

class TheWorldIsNotEnough {
    use HelloWorld;
    public function sayHello() {
        echo 'Hello Universe!';
    }
}

$o = new TheWorldIsNotEnough();
$o->sayHello();
?>
		]]>
		</programlisting>
		<para>Multiple Traits</para>
		<programlisting>
		<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World';
    }
}

class MyHelloWorld {
    use Hello, World;
    public function sayExclamationMark() {
        echo '!';
    }
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
$o->sayExclamationMark();
?>
		]]>
		</programlisting>
		<para>Conflict Resolution</para>
		<programlisting>
		<![CDATA[
<?php
trait A {
    public function smallTalk() {
        echo 'a';
    }
    public function bigTalk() {
        echo 'A';
    }
}

trait B {
    public function smallTalk() {
        echo 'b';
    }
    public function bigTalk() {
        echo 'B';
    }
}

class Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
    }
}

class Aliased_Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
        B::bigTalk as talk;
    }
}
?>
		]]>
		</programlisting>
		<para>Changing Method Visibility</para>
		<programlisting>
		<![CDATA[
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

// Change visibility of sayHello
class MyClass1 {
    use HelloWorld { sayHello as protected; }
}

// Alias method with changed visibility
// sayHello visibility not changed
class MyClass2 {
    use HelloWorld { sayHello as private myPrivateHello; }
}
?>
		]]>
		</programlisting>
		<para>Traits Composed from Traits</para>
		<programlisting>
		<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World!';
    }
}

trait HelloWorld {
    use Hello, World;
}

class MyHelloWorld {
    use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
?>		
		]]>
		</programlisting>
	</section>
	<section id="stdClass">
		<title>PHP </title>
		<programlisting>
		<![CDATA[
<?php
$user = new stdClass();
$user->id = '1';
$user->username = 'neo';

print_r($a);


$user = array();
$user = (object)$user;
$user->firstname = 'Neo';
$user->lastname = 'Chen';
$user->age = 30;
?>		
		]]>
		</programlisting>
	</section>
	<section id="class.example">
		<title>Example</title>
		<section id="method">
			<title>Method</title>
			<example>
				<title>动态增加方法</title>
				<programlisting>
				<![CDATA[
				
<?php
class stdObject {
    public function __construct(array $arguments = array()) {
        if (!empty($arguments)) {
            foreach ($arguments as $property => $argument) {
                if ($argument instanceOf Closure) {
                    $this->{$property} = $argument;
                } else {
                    $this->{$property} = $argument;
                }
            }
        }
    }

    public function __call($method, $arguments) {
        if (isset($this->{$method}) && is_callable($this->{$method})) {
            return call_user_func_array($this->{$method}, $arguments);
        } else {
            throw new Exception("Fatal error: Call to undefined method stdObject::{$method}()");
        }
    }
}

$person = new stdObject(array(
    "name" => "nick",
    "age" => 23,
    "friends" => array("frank", "sally", "aaron"),
    "sayHi" => function() {
        return "Hello there";
    }
));

$person->sayHi2 = function() {
    return "Hello there 2";
};

$person->test = function() {
    return "test";
};

var_dump($person->name, $person->test(), $person->sayHi2());
?>				
				]]>
				</programlisting>
			</example>
		</section>
	</section>
	
</section>