<section id="index">
	<title>python</title><?dbhtml dir="python"?>
	<section>
		<title>安装</title>
		<screen>
		<![CDATA[
sudo pip install -U selenium	
		]]>
		</screen>
	</section>
	<section>
		<title>Demo</title>
		<screen>
		<![CDATA[
vim test.py

from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.common.keys import Keys
from time

browser = webdriver.Firefox() # Get local session of firefox
browser.get("http://www.yahoo.com") # Load page
assert browser.title == "Yahoo!"
elem = browser.find_element_by_name("p") # Find the query box
elem.send_keys("selenium" +
Keys.RETURN)
time.sleep(0.2) # Let the page load, will be added to the API
try:
browser.find_element_by_xpath("//a[contains(@href,'http://seleniumhq.org')]")
except NoSuchElementException:
assert 0, "can't find seleniumhq"
browser.close()
		]]>
		</screen>
	</section>
	<section id="selenium.python.unittest">
		<title>python example</title>
		<example>
			<title>python testcase</title>
			<screen>
			<![CDATA[
from selenium import selenium
import unittest, time, re

class testcase(unittest.TestCase):
    def setUp(self):
        self.verificationErrors = []
        self.selenium = selenium("localhost", 4444, "*chrome", "http://www.google.com/")
        self.selenium.start()

    def test_testcase(self):
        sel = self.selenium
        sel.open("/")
        sel.type("name=q", "netkiller")
        sel.click("name=btnG")
        self.assertEqual(u"Neo")

    def tearDown(self):
        self.selenium.stop()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
			]]>
			</screen>
		</example>
	</section>
	<section id="selenium.python.browse">
		<title>浏览器</title>
		<programlisting>
		<![CDATA[
from selenium import webdriver

driver = webdriver.Safari()		# Safari 浏览器
driver = webdriver.Edge()      	# Edge浏览器
driver = webdriver.Chrome()    	# Chrome浏览器
driver = webdriver.Firefox()   	# Firefox浏览器
driver = webdriver.Ie()        	# Internet Explorer浏览器
driver = webdriver.Opera()     	# Opera浏览器
driver = webdriver.PhantomJS()  # PhantomJS		
		]]>
		</programlisting>
		<section>
			<title>浏览器窗口大小</title>
			<programlisting>
			<![CDATA[
driver.set_window_size(480, 800)			
			]]>
			</programlisting>
			<para>窗口最大化</para>
			<programlisting>
			<![CDATA[
driver.maximize_window()			
			]]>
			</programlisting>
		</section>
		<section>
			<title>浏览器后退，前进</title>
			<screen>
			<![CDATA[
# 后退 
driver.back()
# 前进 
driver.forward()
			]]>
			</screen>
		</section>
		<section>
			<title>页面刷新</title>
			<screen>
			<![CDATA[
driver.refresh() # 刷新			
			]]>
			</screen>
		</section>
		<section>
			<title>窗口切换</title>
			<para>在不同的窗口和框架之间切换</para>
			<programlisting>
			<![CDATA[
# 切换窗口
driver.switch_to_window("windowName")
# 切换框架
driver.switch_to_frame("frameName")
# 回到默认窗口
driver.switch_to_default_content()
			]]>
			</programlisting>
			<para>通过xpath定位iframe</para>
			<programlisting>
			<![CDATA[
iframe = driver.find_element_by_xpath('//*[@id="video-iframe"]')
driver.switch_to_frame(iframe)			
			]]>
			</programlisting>
		</section>
		<section>
			<title>Cookie</title>
			<screen>
			<![CDATA[
get_cookies()： 获得所有cookie信息。
get_cookie(name)： 返回字典的key为“name”的cookie信息。
add_cookie(cookie_dict) ： 添加cookie。“cookie_dict”指字典对象，必须有name 和value 值。
delete_cookie(name,optionsString)：删除cookie信息。“name”是要删除的cookie的名称，“optionsString”是该cookie的选项，目前支持的选项包括“路径”，“域”。
delete_all_cookies()： 删除所有cookie信息			
			]]>
			</screen>
		</section>
		<section>
			<title>页面title</title>
			<programlisting>
			<![CDATA[
title = driver.title # 打印当前页面title
			]]>
			</programlisting>
		</section>
		<section>
			<title>当前页面URL</title>
			<programlisting>
			<![CDATA[
url = driver.current_url # 打印当前页面URL				
			]]>
			</programlisting>
		</section>
		<section>
			<title>获取 HTML 源码</title>
			<programlisting>
			<![CDATA[
html = browser.page_source			
			]]>
			</programlisting>
		</section>

		<section>
			<title>关闭浏览器</title>
			<programlisting>
			<![CDATA[
close() 关闭单个窗口
quit() 关闭所有窗口			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="selenium.python.wait">
		<title>等待事件</title>
		<section>
			<title>隐式Waits</title>
			<para>等待页面加载完毕</para>
			<screen>
		<![CDATA[
driver.implicitly_wait(10) # seconds		
		]]>
			</screen>
			<para>implicitly_wait 只能延迟执行，无法判断页面是否被真正完全加载完毕。</para>
		</section>
		<section>
			<title>显式Waits</title>
			<para>等待页面加载直到发现某个元素为止。</para>
			<screen>
		<![CDATA[
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

driver = webdriver.Firefox()
driver.get("http://www.netkiller.cn/")
try:
    element = WebDriverWait(driver,10).until(
        EC.presence_of_element_located((By.ID,"copyright"))
    )
finally:
    driver.quit()		
		]]>
			</screen>
			<screen>
		<![CDATA[
title_is
title_contains
presence_of_element_located
visibility_of_element_located
visibility_of
presence_of_all_elements_located
text_to_be_present_in_element
text_to_be_present_in_element_value
frame_to_be_available_and_switch_to_it
invisibility_of_element_located
element_to_be_clickable
staleness_of
element_to_be_selected
element_located_to_be_selected
element_selection_state_to_be
element_located_selection_state_to_be
alert_is_present		
		]]>
			</screen>
			<para>等待，直到按钮可以点击为止</para>
			<screen>
			<![CDATA[
from selenium.webdriver.support import expected_conditions as EC

wait = WebDriverWait(driver,10)
element = wait.until(EC.element_to_be_clickable((By.ID,'button')))			
			]]>
			</screen>
		</section>
	</section>

	<section id="selenium.python.element">
		<title>元素定位</title>
		<section>
			<title>CSS</title>
			<screen>
		<![CDATA[
driver.find_element_by_css_selector("div.group-left > ul > li:nth-child({}) > span".format(random.randint(2, 46))).click()		
		]]>
			</screen>
		</section>
		<section>
			<title>XPath</title>
			<section>
				<title></title>
				<programlisting>
				<![CDATA[
ul = chrome.find_element_by_xpath('//*[@id="menu"]/ul')
list = ul.find_elements_by_xpath('li')
print(len(list))    # 计算有li数量
list[-1].text  		# 取最后一个li的文本内容
list[1].click()		# 点击第一个li
				]]>
				</programlisting>
			</section>

			<section>
				<title>表格操作</title>
				<para>指定行列取数据</para>
				<programlisting>
			<![CDATA[
#第二行第二列，tbody是对于表格的标签				
XPath表达式： //*[id = "table"]/tbody/tr[2]/td[2]   		
			]]>
				</programlisting>
				<para>遍历表格，取出第四列</para>
				<programlisting>
				<![CDATA[
		tbody = self.browser.find_element_by_xpath('//table[@id="Order"]/tbody')
        rows = tbody.find_elements_by_tag_name('tr')
        print(len(rows))
        vinNoList = []
        for row in rows:
            vin = row.find_elements_by_tag_name('td')[3].text
            vinNoList.append(vin)
        
        vinNoList = vinNoList[1:]
        print(vinNoList)				
				]]>
				</programlisting>
			</section>
		</section>
		<section>
			<title>元素属性</title>
			<programlisting>
			<![CDATA[
方法				说明
is_selected()	元素是否被选中
is_enabled()	元素是否可用
is_displayed()	元素是否可见		
size： 			返回元素的尺寸。
text： 			获取元素的文本。
get_attribute(name)： 获得属性值。
.clear() 		清空内容
driver.find_element_by_id('name').tag_name

driver.find_element_by_id('name').rect
## {'height': 36, 'width': 100, 'x': 737.8108520507812, 'y': 223.1344451904297}

driver.find_element_by_id('age').location 
## {'x': 738, 'y': 223}

元素父级元素对象

parent 属性用于获取元素的父级元素对象：
driver.find_element_by_id('logo').parent

driver.find_element_by_id('su').get_property('value') 
			]]>
			</programlisting>
			<section>
				<title></title>
				<programlisting>
				<![CDATA[
elem = driver.find_element_by_xpath("//*")
source_code = elem.get_attribute("outerHTML")

elem = wd.find_element_by_css_selector('#my-id')
html = wd.execute_script("return arguments[0].innerHTML;", elem)

html = elem.get_attribute('innerHTML')				
				]]>
				</programlisting>
			</section>

		</section>

	</section>
	<section id="selenium.python.keys">
		<title>键盘事件</title>
		<para>以下为常用的键盘操作：</para>
		<screen>
		<![CDATA[
send_keys(Keys.BACK_SPACE) 删除键（BackSpace）
send_keys(Keys.SPACE) 空格键(Space)
send_keys(Keys.TAB) 制表键(Tab)
send_keys(Keys.ESCAPE) 回退键（Esc）
send_keys(Keys.ENTER) 回车键（Enter）
send_keys(Keys.CONTROL,'a') 全选（Ctrl+A）
send_keys(Keys.CONTROL,'c') 复制（Ctrl+C）
send_keys(Keys.CONTROL,'x') 剪切（Ctrl+X）
send_keys(Keys.CONTROL,'v') 粘贴（Ctrl+V）
send_keys(Keys.F1) 键盘 F1
……
send_keys(Keys.F12) 键盘 F12
		
		]]>
		</screen>
	</section>
	<section>
		<title>鼠标事件</title>
		<para>在 WebDriver 中鼠标操作的方法封装在 ActionChains 类提供。</para>
		<programlisting>
		<![CDATA[
ActionChains 类提供了鼠标操作的常用方法：

perform()： 			执行所有 ActionChains 中存储的行为；
context_click()： 	右击；
double_click()： 	双击；
drag_and_drop()： 	拖动；
move_to_element()： 鼠标悬停。
		]]>
		</programlisting>
		<para>鼠标悬停例子：</para>
		<programlisting>
		<![CDATA[
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains

driver = webdriver.Chrome()
driver.get("https://www.baidu.cn")

# 定位到要悬停的元素
above = driver.find_element_by_link_text("设置")
# 对定位到的元素执行鼠标悬停操作
ActionChains(driver).move_to_element(above).perform()			
		]]>
		</programlisting>

	</section>
	<section id="selenium.python.screenshot">
		<title>Screenshot</title>
		<screen>
		<![CDATA[
driver.get_screenshot_as_file("~/screenshot.png")		
		]]>
		</screen>
	</section>

	<section id="selenium.python.form">
		<title>表单处理</title>
		<section>
			<title>下拉框</title>
			<screen>
			<![CDATA[
# 通过select选项的索引来定位选择对应选项(从0开始计数)
Select(s).select_by_index(5)
 
# 通过选项的value属性值来定位
Select(s).select_by_value('2')
 
# 通过选项的文本内容来定位
Select(s).select_by_visible_text('牡丹江')
 
# 返回第一个选中的optionElement对象
Select(s).first_selected_option
 
# 返回所有选中的optionElement对象
Select(s).all_selected_options
 
# 取消所有选中的option
Select(s).deselect_all()
 
# 通过option的index来取消对应的option
Select(s).deselect_by_index(1)
 
# 通过value属性，来取消对应option
Select(s).deselect_by_value('')
 
# 通过option的文本内容，取消对应的option
Select(s).deselect_by_visible_text('')			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
# 定位下拉框，选择其中的选项
sel = driver.find_element_by_css_selector("select#nr")
sel.find_element_by_css_selector("option[value='20']").click()

# 直接定位到选项
driver.find_element_by_css_selector("select#nr>option:nth-child(2)").click()

s = driver.find_element_by_id("nr")
s.find_element_by_xpath("//option[@value='50']").click()

from selenium import webdriver
browser = webdriver.Firefox()
select_box = browser.find_element_by_name("countries") 
options = [x for x in select_box.find_elements_by_tag_name("option")]
for element in options:
    print(element.get_attribute("value"))
    
    

import selenium.webdriver as webdriver
import selenium.webdriver.support.ui as UI
import contextlib

with contextlib.closing(webdriver.Firefox()) as driver:
    driver.get(url)
    select = UI.Select(driver.find_element_by_xpath('//select[@name="countries"]'))
    for option in select.options:
        print(option.text, option.get_attribute('value'))    
        
from selenium.webdriver.support.ui import Select 
dropdown_menu = Select(driver.find_element_by_name(<NAME>))
for option in dropdown_menu.options:
            print(option.text, option.get_attribute('value'))          			
			]]>
			</programlisting>

		</section>
		<section>
			<title>文件上传</title>
			<programlisting>
			<![CDATA[
# 定位上传按钮，添加本地文件
driver.find_element_by_name("file").send_keys('/tmp/upload_file.txt')
			]]>
			</programlisting>
		</section>
	</section>
	<section id="selenium.python.alert">
		<title>弹出对话框</title>
		<programlisting>
		<![CDATA[
alert = driver.switch_to_alert()
text：		返回 alert/confirm/prompt 中的文字信息。
accept()：	接受现有警告框。
dismiss()：	解散现有警告框。
send_keys(keysToSend)：发送文本至警告框。
		
		]]>
		</programlisting>
	</section>
	<section id="selenium.python.js">
		<title>调用JavaScript代码</title>
		<programlisting>
		<![CDATA[
# 通过javascript设置浏览器窗口的滚动条位置
js="window.scrollTo(100,450);"
driver.execute_script(js) 

span = 'document.getElementById("returnName1").innerHTML="设置 SPAN 文本" '
self.driver.execute_script(span)
		]]>
		</programlisting>
	</section>
</section>