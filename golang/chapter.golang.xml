<?xml version="1.0" encoding="UTF-8"?>
<chapter id="golang">
	<title>golang</title>
	<section id="go.install">
		<title>安装</title>
		<screen>
		<![CDATA[
sudo snap install go		
		]]>
		</screen>
	</section>
	<section id="helloword">
		<title>helloword</title>
		<programlisting>
		<![CDATA[
package main

import "fmt"

func main(){

	fmt.Printf("Hello World!!!\n");

}
		]]>
		</programlisting>
		<screen>
		<![CDATA[
neo@MacBook-Pro ~/golang % go build test.go 
neo@MacBook-Pro ~/golang % ./test 
Hello World!!!
		]]>
		</screen>
	</section>
	<section>
		<title>优化编译参数</title>
		<programlisting>
		<![CDATA[
neo@MacBook-Pro ~/golang % go build test.go
neo@MacBook-Pro ~/golang % ll test    
-rwxr-xr-x  1 neo  staff   2.0M Mar 11 11:10 test

neo@MacBook-Pro ~/golang % go build -ldflags "-s -w" test.go
neo@MacBook-Pro ~/golang % ll test                          
-rwxr-xr-x  1 neo  staff   1.4M Mar 11 11:10 test		
		]]>
		</programlisting>
	</section>
	<section id="variable">
		<title>变量</title>
		<programlisting>
		<![CDATA[
package main

import "fmt"

//声明变量number为int数据，此时默认复制为0
var number int 	

// 定义多个变量
var(
	name string
	age int
	sex bool
)

func main(){

	//直接声明变量number赋值为2
	number := 2
	fmt.Println(number);

	name = "Neo"
	fmt.Println(name);
	
	url := "http://www.netkiller.cn"
	fmt.Println(url);

}		
		]]>
		</programlisting>
		<section id="">
			<title>const 常量定义</title>
			<programlisting>
			<![CDATA[
//声明常量 const url
const url = "http://www.netkiller.cn"

const nickname string = "netkiller"

const Monday, Tuesday, Wednesday, Thursday, Friday, Saturday = 1, 2, 3, 4, 5, 6

const (
	New, Pending, Done = 1, 2, 3
	Canceled, Failed, Scuess = 4, 5, 6
	)

// 生成枚举值时候可以使用关键字：itoa, 值将依次递增
const (
	Sunday = iota 	// 0
	Monday        	// 1
	Tuesday       	// 2
	Wednesday		// 3
	​Thursday		 // 4
	Friday			// 5
	Saturday		// 6
	)
			]]>
			</programlisting>
		</section>
	</section>
	<section id="type">
		<title>数值类型</title>
		<programlisting>
			<para>数值型</para>
		<![CDATA[
有符号：int8,int16,int32,int64		
无符号：byte,uint8,uint16,uint32,uint64
byte 是 uint8 的别名。	

浮点类型的值有 float32 和 float64
		]]>
		</programlisting>
		<section id="string">
			<title>字符串</title>
			<programlisting>
		<![CDATA[
字符串：string 例如："hello world" 或者 `hello world` Go语言的字符串的字节使用UTF-8编码标识Unicode文本。

多行字符串连接
str := "Starting part"
	+ "..."
	+ "..."
    + "Ending part"
    
str := `Starting part
	...
	...
    Ending part`
    
字符串处理的包
---------------------------------------------
string包
包括字符串的分割，替换，合并等处理；
strconv包
提供许多可以在字符串和其他类型的数据之间的转换函数。
utf-8包
主要用来查询和操作UTF-8编码的字符串或者字符切片。
unicode包
提供一些用来检查Unicode码点是否符合主要标准的函数。
		]]>
			</programlisting>
		</section>
		<section id="float">
			<title>浮点</title>
			<programlisting>
			<![CDATA[
package main

import "fmt"
import "strconv"

func FloatToString(input_num float64) string {
    // to convert a float number to a string
    return strconv.FormatFloat(input_num, 'f', 2, 64)
}

func main() {
	fmt.Println(FloatToString(21312421.213123))
	fmt.Println(fmt.Sprintf("%.6f", 21312421.213123))

	s := "3.1415926535"
	v1, _ := strconv.ParseFloat(s, 32)
	fmt.Println(v1)

}
			]]>
			</programlisting>
		</section>
		<section id="array">
			<title>数组</title>
			<programlisting>
			<![CDATA[
[5] int {1,2,3,4,5} 
长度为5的数组，其元素值依次为：1，2，3，4，5
[5] int {1,2} 
长度为5的数组，其长度是根据初始化时指定的元素个数决定的


[5] int { 2:1,3:2,4:3} 
长度为5的数组，key:value,其元素值依次为：0，0，1，2，3。在初始化时指定了2，3，4索引中对应的值：1，2，3

[...] int {1,2,3,4,5} 
长度为5的数组，其元素值依次为：1，2，0，0，0 。在初始化时没有指定初值的元素将会赋值为其元素类型int的默认值0,string的默认值是""
[...] int {2:1,4:3} 
长度为5的数组，起元素值依次为：0，0，1，0，3。由于指定了最大索引4对应的值3，根据初始化的元素个数确定其长度为5			
			]]>
			</programlisting>

			<programlisting>
		<![CDATA[
package main

import "fmt"

func main(){

	arr :=[...] int {1,2,3,4,5}

	for index, value := range arr {
		fmt.Printf("arr[%d]=%d \n", index, value)
	}

	for index := 0; index < len(arr); index++ {
		fmt.Printf("arr[%d]=%d \n", index, arr[index])
	}

}
		]]>
			</programlisting>

		</section>

		<section>
			<title>转换</title>
			<programlisting>
			<![CDATA[
(1)int转string
s := strconv.Itoa(i)
等价于s := strconv.FormatInt(int64(i), 10)

(2)int64转string
i := int64(123)
s := strconv.FormatInt(i, 10)
第二个参数为基数，可选2~36
注：对于无符号整形，可以使用FormatUint(i uint64, base int)
(3)string转int
i, err := strconv.Atoi(s)
(4)string转int64
i, err := strconv.ParseInt(s, 10, 64)
第二个参数为基数（2~36），第三个参数位大小表示期望转换的结果类型，其值可以为0, 8, 16, 32和64，分别对应 int, int8, int16, int32和int64
(5)float相关
float转string：
v := 3.1415926535
s1 := strconv.FormatFloat(v, 'E', -1, 32)//float32s2 := strconv.FormatFloat(v, 'E', -1, 64)//float64
函数原型及参数含义具体可查看：https://golang.org/pkg/strconv/#FormatFloat
string转float：
s := "3.1415926535"
v1, err := strconv.ParseFloat(v, 32)
v2, err := strconv.ParseFloat(v, 64)
 PS：go语言string、int、int64互相转换
//string到int 
int,err:=strconv.Atoi(string) 
//string到int64 
int64, err := strconv.ParseInt(string, 10, 64) 
//int到string 
string:=strconv.Itoa(int) 
//int64到string 
string:=strconv.FormatInt(int64,10)
//string到float32(float64)
float,err := strconv.ParseFloat(string,32/64)
//float到string
string := strconv.FormatFloat(float32, 'E', -1, 32)
string := strconv.FormatFloat(float64, 'E', -1, 64)
// 'b' (-ddddp±ddd，二进制指数)
// 'e' (-d.dddde±dd，十进制指数)
// 'E' (-d.ddddE±dd，十进制指数)
// 'f' (-ddd.dddd，没有指数)
// 'g' ('e':大指数，'f':其它情况)
// 'G' ('E':大指数，'f':其它情况)
			
			]]>
			</programlisting>
		</section>

	</section>
	
	&chapter.struct.xml;
	&chapter.map.xml;

	<section id="class">
		<title>class</title>
		<programlisting>
		<![CDATA[
package main

import "fmt"

type Person struct {
	name string
	sex	bool
	age int
    address string
}

func (person *Person) setName(_name string) {
    person.name = _name
}

func (person *Person) getName() string {
    return person.name
}


func main(){
	
	person := &Person{"Test",true,30,"Shenzhen,China"}

	fmt.Println(person.name);

	person.name = "Neo"
	fmt.Println(person.name);

	person.setName("Netkiller")
	fmt.Println(person.getName());

}
		]]>
		</programlisting>
	</section>
	
	&chapter.json.xml;
	&chapter.package.xml;
</chapter>